// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: flwr/proto/recordset.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Flwr_Proto_DoubleList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vals: [Double] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_Sint64List {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vals: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_BoolList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vals: [Bool] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_StringList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vals: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_BytesList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vals: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_Array {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dtype: String = String()

  var shape: [Int32] = []

  var stype: String = String()

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_MetricsRecordValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Flwr_Proto_MetricsRecordValue.OneOf_Value? = nil

  /// Single element
  var double: Double {
    get {
      if case .double(let v)? = value {return v}
      return 0
    }
    set {value = .double(newValue)}
  }

  var sint64: Int64 {
    get {
      if case .sint64(let v)? = value {return v}
      return 0
    }
    set {value = .sint64(newValue)}
  }

  /// List types
  var doubleList: Flwr_Proto_DoubleList {
    get {
      if case .doubleList(let v)? = value {return v}
      return Flwr_Proto_DoubleList()
    }
    set {value = .doubleList(newValue)}
  }

  var sint64List: Flwr_Proto_Sint64List {
    get {
      if case .sint64List(let v)? = value {return v}
      return Flwr_Proto_Sint64List()
    }
    set {value = .sint64List(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    /// Single element
    case double(Double)
    case sint64(Int64)
    /// List types
    case doubleList(Flwr_Proto_DoubleList)
    case sint64List(Flwr_Proto_Sint64List)

  #if !swift(>=4.1)
    static func ==(lhs: Flwr_Proto_MetricsRecordValue.OneOf_Value, rhs: Flwr_Proto_MetricsRecordValue.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.double, .double): return {
        guard case .double(let l) = lhs, case .double(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sint64, .sint64): return {
        guard case .sint64(let l) = lhs, case .sint64(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.doubleList, .doubleList): return {
        guard case .doubleList(let l) = lhs, case .doubleList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sint64List, .sint64List): return {
        guard case .sint64List(let l) = lhs, case .sint64List(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Flwr_Proto_ConfigsRecordValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Flwr_Proto_ConfigsRecordValue.OneOf_Value? = nil

  /// Single element
  var double: Double {
    get {
      if case .double(let v)? = value {return v}
      return 0
    }
    set {value = .double(newValue)}
  }

  var sint64: Int64 {
    get {
      if case .sint64(let v)? = value {return v}
      return 0
    }
    set {value = .sint64(newValue)}
  }

  var bool: Bool {
    get {
      if case .bool(let v)? = value {return v}
      return false
    }
    set {value = .bool(newValue)}
  }

  var string: String {
    get {
      if case .string(let v)? = value {return v}
      return String()
    }
    set {value = .string(newValue)}
  }

  var bytes: Data {
    get {
      if case .bytes(let v)? = value {return v}
      return Data()
    }
    set {value = .bytes(newValue)}
  }

  /// List types
  var doubleList: Flwr_Proto_DoubleList {
    get {
      if case .doubleList(let v)? = value {return v}
      return Flwr_Proto_DoubleList()
    }
    set {value = .doubleList(newValue)}
  }

  var sint64List: Flwr_Proto_Sint64List {
    get {
      if case .sint64List(let v)? = value {return v}
      return Flwr_Proto_Sint64List()
    }
    set {value = .sint64List(newValue)}
  }

  var boolList: Flwr_Proto_BoolList {
    get {
      if case .boolList(let v)? = value {return v}
      return Flwr_Proto_BoolList()
    }
    set {value = .boolList(newValue)}
  }

  var stringList: Flwr_Proto_StringList {
    get {
      if case .stringList(let v)? = value {return v}
      return Flwr_Proto_StringList()
    }
    set {value = .stringList(newValue)}
  }

  var bytesList: Flwr_Proto_BytesList {
    get {
      if case .bytesList(let v)? = value {return v}
      return Flwr_Proto_BytesList()
    }
    set {value = .bytesList(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    /// Single element
    case double(Double)
    case sint64(Int64)
    case bool(Bool)
    case string(String)
    case bytes(Data)
    /// List types
    case doubleList(Flwr_Proto_DoubleList)
    case sint64List(Flwr_Proto_Sint64List)
    case boolList(Flwr_Proto_BoolList)
    case stringList(Flwr_Proto_StringList)
    case bytesList(Flwr_Proto_BytesList)

  #if !swift(>=4.1)
    static func ==(lhs: Flwr_Proto_ConfigsRecordValue.OneOf_Value, rhs: Flwr_Proto_ConfigsRecordValue.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.double, .double): return {
        guard case .double(let l) = lhs, case .double(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sint64, .sint64): return {
        guard case .sint64(let l) = lhs, case .sint64(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bool, .bool): return {
        guard case .bool(let l) = lhs, case .bool(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.string, .string): return {
        guard case .string(let l) = lhs, case .string(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bytes, .bytes): return {
        guard case .bytes(let l) = lhs, case .bytes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.doubleList, .doubleList): return {
        guard case .doubleList(let l) = lhs, case .doubleList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sint64List, .sint64List): return {
        guard case .sint64List(let l) = lhs, case .sint64List(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.boolList, .boolList): return {
        guard case .boolList(let l) = lhs, case .boolList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stringList, .stringList): return {
        guard case .stringList(let l) = lhs, case .stringList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bytesList, .bytesList): return {
        guard case .bytesList(let l) = lhs, case .bytesList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Flwr_Proto_ParametersRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataKeys: [String] = []

  var dataValues: [Flwr_Proto_Array] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_MetricsRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Dictionary<String,Flwr_Proto_MetricsRecordValue> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_ConfigsRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Dictionary<String,Flwr_Proto_ConfigsRecordValue> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Flwr_Proto_RecordSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var parameters: Dictionary<String,Flwr_Proto_ParametersRecord> = [:]

  var metrics: Dictionary<String,Flwr_Proto_MetricsRecord> = [:]

  var configs: Dictionary<String,Flwr_Proto_ConfigsRecord> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Flwr_Proto_DoubleList: @unchecked Sendable {}
extension Flwr_Proto_Sint64List: @unchecked Sendable {}
extension Flwr_Proto_BoolList: @unchecked Sendable {}
extension Flwr_Proto_StringList: @unchecked Sendable {}
extension Flwr_Proto_BytesList: @unchecked Sendable {}
extension Flwr_Proto_Array: @unchecked Sendable {}
extension Flwr_Proto_MetricsRecordValue: @unchecked Sendable {}
extension Flwr_Proto_MetricsRecordValue.OneOf_Value: @unchecked Sendable {}
extension Flwr_Proto_ConfigsRecordValue: @unchecked Sendable {}
extension Flwr_Proto_ConfigsRecordValue.OneOf_Value: @unchecked Sendable {}
extension Flwr_Proto_ParametersRecord: @unchecked Sendable {}
extension Flwr_Proto_MetricsRecord: @unchecked Sendable {}
extension Flwr_Proto_ConfigsRecord: @unchecked Sendable {}
extension Flwr_Proto_RecordSet: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "flwr.proto"

extension Flwr_Proto_DoubleList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoubleList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.vals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vals.isEmpty {
      try visitor.visitPackedDoubleField(value: self.vals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_DoubleList, rhs: Flwr_Proto_DoubleList) -> Bool {
    if lhs.vals != rhs.vals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_Sint64List: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Sint64List"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedSInt64Field(value: &self.vals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vals.isEmpty {
      try visitor.visitPackedSInt64Field(value: self.vals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_Sint64List, rhs: Flwr_Proto_Sint64List) -> Bool {
    if lhs.vals != rhs.vals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_BoolList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BoolList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBoolField(value: &self.vals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vals.isEmpty {
      try visitor.visitPackedBoolField(value: self.vals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_BoolList, rhs: Flwr_Proto_BoolList) -> Bool {
    if lhs.vals != rhs.vals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_StringList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StringList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.vals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vals.isEmpty {
      try visitor.visitRepeatedStringField(value: self.vals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_StringList, rhs: Flwr_Proto_StringList) -> Bool {
    if lhs.vals != rhs.vals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_BytesList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BytesList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.vals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vals.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.vals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_BytesList, rhs: Flwr_Proto_BytesList) -> Bool {
    if lhs.vals != rhs.vals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_Array: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Array"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dtype"),
    2: .same(proto: "shape"),
    3: .same(proto: "stype"),
    4: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dtype) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.shape) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.stype) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dtype.isEmpty {
      try visitor.visitSingularStringField(value: self.dtype, fieldNumber: 1)
    }
    if !self.shape.isEmpty {
      try visitor.visitPackedInt32Field(value: self.shape, fieldNumber: 2)
    }
    if !self.stype.isEmpty {
      try visitor.visitSingularStringField(value: self.stype, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_Array, rhs: Flwr_Proto_Array) -> Bool {
    if lhs.dtype != rhs.dtype {return false}
    if lhs.shape != rhs.shape {return false}
    if lhs.stype != rhs.stype {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_MetricsRecordValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MetricsRecordValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double"),
    2: .same(proto: "sint64"),
    21: .standard(proto: "double_list"),
    22: .standard(proto: "sint64_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .double(v)
        }
      }()
      case 2: try {
        var v: Int64?
        try decoder.decodeSingularSInt64Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .sint64(v)
        }
      }()
      case 21: try {
        var v: Flwr_Proto_DoubleList?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .doubleList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .doubleList(v)
        }
      }()
      case 22: try {
        var v: Flwr_Proto_Sint64List?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .sint64List(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .sint64List(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .double?: try {
      guard case .double(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }()
    case .sint64?: try {
      guard case .sint64(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularSInt64Field(value: v, fieldNumber: 2)
    }()
    case .doubleList?: try {
      guard case .doubleList(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .sint64List?: try {
      guard case .sint64List(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_MetricsRecordValue, rhs: Flwr_Proto_MetricsRecordValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_ConfigsRecordValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigsRecordValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double"),
    2: .same(proto: "sint64"),
    3: .same(proto: "bool"),
    4: .same(proto: "string"),
    5: .same(proto: "bytes"),
    21: .standard(proto: "double_list"),
    22: .standard(proto: "sint64_list"),
    23: .standard(proto: "bool_list"),
    24: .standard(proto: "string_list"),
    25: .standard(proto: "bytes_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .double(v)
        }
      }()
      case 2: try {
        var v: Int64?
        try decoder.decodeSingularSInt64Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .sint64(v)
        }
      }()
      case 3: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .bool(v)
        }
      }()
      case 4: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .string(v)
        }
      }()
      case 5: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .bytes(v)
        }
      }()
      case 21: try {
        var v: Flwr_Proto_DoubleList?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .doubleList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .doubleList(v)
        }
      }()
      case 22: try {
        var v: Flwr_Proto_Sint64List?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .sint64List(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .sint64List(v)
        }
      }()
      case 23: try {
        var v: Flwr_Proto_BoolList?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .boolList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .boolList(v)
        }
      }()
      case 24: try {
        var v: Flwr_Proto_StringList?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .stringList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .stringList(v)
        }
      }()
      case 25: try {
        var v: Flwr_Proto_BytesList?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .bytesList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .bytesList(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .double?: try {
      guard case .double(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }()
    case .sint64?: try {
      guard case .sint64(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularSInt64Field(value: v, fieldNumber: 2)
    }()
    case .bool?: try {
      guard case .bool(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case .string?: try {
      guard case .string(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .bytes?: try {
      guard case .bytes(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }()
    case .doubleList?: try {
      guard case .doubleList(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .sint64List?: try {
      guard case .sint64List(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case .boolList?: try {
      guard case .boolList(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .stringList?: try {
      guard case .stringList(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    case .bytesList?: try {
      guard case .bytesList(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_ConfigsRecordValue, rhs: Flwr_Proto_ConfigsRecordValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_ParametersRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParametersRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_keys"),
    2: .standard(proto: "data_values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.dataKeys) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.dataValues) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataKeys, fieldNumber: 1)
    }
    if !self.dataValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataValues, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_ParametersRecord, rhs: Flwr_Proto_ParametersRecord) -> Bool {
    if lhs.dataKeys != rhs.dataKeys {return false}
    if lhs.dataValues != rhs.dataValues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_MetricsRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MetricsRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_MetricsRecordValue>.self, value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_MetricsRecordValue>.self, value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_MetricsRecord, rhs: Flwr_Proto_MetricsRecord) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_ConfigsRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigsRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_ConfigsRecordValue>.self, value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_ConfigsRecordValue>.self, value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_ConfigsRecord, rhs: Flwr_Proto_ConfigsRecord) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_RecordSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parameters"),
    2: .same(proto: "metrics"),
    3: .same(proto: "configs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_ParametersRecord>.self, value: &self.parameters) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_MetricsRecord>.self, value: &self.metrics) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_ConfigsRecord>.self, value: &self.configs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_ParametersRecord>.self, value: self.parameters, fieldNumber: 1)
    }
    if !self.metrics.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_MetricsRecord>.self, value: self.metrics, fieldNumber: 2)
    }
    if !self.configs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Flwr_Proto_ConfigsRecord>.self, value: self.configs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_RecordSet, rhs: Flwr_Proto_RecordSet) -> Bool {
    if lhs.parameters != rhs.parameters {return false}
    if lhs.metrics != rhs.metrics {return false}
    if lhs.configs != rhs.configs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
