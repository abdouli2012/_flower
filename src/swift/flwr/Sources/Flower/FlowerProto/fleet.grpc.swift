//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: flwr/proto/fleet.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Flwr_Proto_FleetClient`, then call methods of this protocol to make API calls.
internal protocol Flwr_Proto_FleetClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol? { get }

  func createNode(
    _ request: Flwr_Proto_CreateNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flwr_Proto_CreateNodeRequest, Flwr_Proto_CreateNodeResponse>

  func deleteNode(
    _ request: Flwr_Proto_DeleteNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flwr_Proto_DeleteNodeRequest, Flwr_Proto_DeleteNodeResponse>

  func ping(
    _ request: Flwr_Proto_PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flwr_Proto_PingRequest, Flwr_Proto_PingResponse>

  func pullTaskIns(
    _ request: Flwr_Proto_PullTaskInsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flwr_Proto_PullTaskInsRequest, Flwr_Proto_PullTaskInsResponse>

  func pushTaskRes(
    _ request: Flwr_Proto_PushTaskResRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flwr_Proto_PushTaskResRequest, Flwr_Proto_PushTaskResResponse>

  func getRun(
    _ request: Flwr_Proto_GetRunRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flwr_Proto_GetRunRequest, Flwr_Proto_GetRunResponse>
}

extension Flwr_Proto_FleetClientProtocol {
  internal var serviceName: String {
    return "flwr.proto.Fleet"
  }

  /// Unary call to CreateNode
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createNode(
    _ request: Flwr_Proto_CreateNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flwr_Proto_CreateNodeRequest, Flwr_Proto_CreateNodeResponse> {
    return self.makeUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.createNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateNodeInterceptors() ?? []
    )
  }

  /// Unary call to DeleteNode
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteNode(
    _ request: Flwr_Proto_DeleteNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flwr_Proto_DeleteNodeRequest, Flwr_Proto_DeleteNodeResponse> {
    return self.makeUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.deleteNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNodeInterceptors() ?? []
    )
  }

  /// Unary call to Ping
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ping(
    _ request: Flwr_Proto_PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flwr_Proto_PingRequest, Flwr_Proto_PingResponse> {
    return self.makeUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// Retrieve one or more tasks, if possible
  ///
  /// HTTP API path: /api/v1/fleet/pull-task-ins
  ///
  /// - Parameters:
  ///   - request: Request to send to PullTaskIns.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pullTaskIns(
    _ request: Flwr_Proto_PullTaskInsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flwr_Proto_PullTaskInsRequest, Flwr_Proto_PullTaskInsResponse> {
    return self.makeUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.pullTaskIns.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullTaskInsInterceptors() ?? []
    )
  }

  /// Complete one or more tasks, if possible
  ///
  /// HTTP API path: /api/v1/fleet/push-task-res
  ///
  /// - Parameters:
  ///   - request: Request to send to PushTaskRes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pushTaskRes(
    _ request: Flwr_Proto_PushTaskResRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flwr_Proto_PushTaskResRequest, Flwr_Proto_PushTaskResResponse> {
    return self.makeUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.pushTaskRes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushTaskResInterceptors() ?? []
    )
  }

  /// Unary call to GetRun
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRun.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRun(
    _ request: Flwr_Proto_GetRunRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flwr_Proto_GetRunRequest, Flwr_Proto_GetRunResponse> {
    return self.makeUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.getRun.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRunInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Flwr_Proto_FleetClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Flwr_Proto_FleetNIOClient")
internal final class Flwr_Proto_FleetClient: Flwr_Proto_FleetClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the flwr.proto.Fleet service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Flwr_Proto_FleetNIOClient: Flwr_Proto_FleetClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol?

  /// Creates a client for the flwr.proto.Fleet service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Flwr_Proto_FleetAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol? { get }

  func makeCreateNodeCall(
    _ request: Flwr_Proto_CreateNodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_CreateNodeRequest, Flwr_Proto_CreateNodeResponse>

  func makeDeleteNodeCall(
    _ request: Flwr_Proto_DeleteNodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_DeleteNodeRequest, Flwr_Proto_DeleteNodeResponse>

  func makePingCall(
    _ request: Flwr_Proto_PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_PingRequest, Flwr_Proto_PingResponse>

  func makePullTaskInsCall(
    _ request: Flwr_Proto_PullTaskInsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_PullTaskInsRequest, Flwr_Proto_PullTaskInsResponse>

  func makePushTaskResCall(
    _ request: Flwr_Proto_PushTaskResRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_PushTaskResRequest, Flwr_Proto_PushTaskResResponse>

  func makeGetRunCall(
    _ request: Flwr_Proto_GetRunRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_GetRunRequest, Flwr_Proto_GetRunResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Flwr_Proto_FleetAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Flwr_Proto_FleetClientMetadata.serviceDescriptor
  }

  internal var interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateNodeCall(
    _ request: Flwr_Proto_CreateNodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_CreateNodeRequest, Flwr_Proto_CreateNodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.createNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateNodeInterceptors() ?? []
    )
  }

  internal func makeDeleteNodeCall(
    _ request: Flwr_Proto_DeleteNodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_DeleteNodeRequest, Flwr_Proto_DeleteNodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.deleteNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNodeInterceptors() ?? []
    )
  }

  internal func makePingCall(
    _ request: Flwr_Proto_PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_PingRequest, Flwr_Proto_PingResponse> {
    return self.makeAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  internal func makePullTaskInsCall(
    _ request: Flwr_Proto_PullTaskInsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_PullTaskInsRequest, Flwr_Proto_PullTaskInsResponse> {
    return self.makeAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.pullTaskIns.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullTaskInsInterceptors() ?? []
    )
  }

  internal func makePushTaskResCall(
    _ request: Flwr_Proto_PushTaskResRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_PushTaskResRequest, Flwr_Proto_PushTaskResResponse> {
    return self.makeAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.pushTaskRes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushTaskResInterceptors() ?? []
    )
  }

  internal func makeGetRunCall(
    _ request: Flwr_Proto_GetRunRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flwr_Proto_GetRunRequest, Flwr_Proto_GetRunResponse> {
    return self.makeAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.getRun.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRunInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Flwr_Proto_FleetAsyncClientProtocol {
  internal func createNode(
    _ request: Flwr_Proto_CreateNodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flwr_Proto_CreateNodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.createNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateNodeInterceptors() ?? []
    )
  }

  internal func deleteNode(
    _ request: Flwr_Proto_DeleteNodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flwr_Proto_DeleteNodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.deleteNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNodeInterceptors() ?? []
    )
  }

  internal func ping(
    _ request: Flwr_Proto_PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flwr_Proto_PingResponse {
    return try await self.performAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  internal func pullTaskIns(
    _ request: Flwr_Proto_PullTaskInsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flwr_Proto_PullTaskInsResponse {
    return try await self.performAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.pullTaskIns.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullTaskInsInterceptors() ?? []
    )
  }

  internal func pushTaskRes(
    _ request: Flwr_Proto_PushTaskResRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flwr_Proto_PushTaskResResponse {
    return try await self.performAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.pushTaskRes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushTaskResInterceptors() ?? []
    )
  }

  internal func getRun(
    _ request: Flwr_Proto_GetRunRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flwr_Proto_GetRunResponse {
    return try await self.performAsyncUnaryCall(
      path: Flwr_Proto_FleetClientMetadata.Methods.getRun.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRunInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Flwr_Proto_FleetAsyncClient: Flwr_Proto_FleetAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Flwr_Proto_FleetClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Flwr_Proto_FleetClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createNode'.
  func makeCreateNodeInterceptors() -> [ClientInterceptor<Flwr_Proto_CreateNodeRequest, Flwr_Proto_CreateNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteNode'.
  func makeDeleteNodeInterceptors() -> [ClientInterceptor<Flwr_Proto_DeleteNodeRequest, Flwr_Proto_DeleteNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Flwr_Proto_PingRequest, Flwr_Proto_PingResponse>]

  /// - Returns: Interceptors to use when invoking 'pullTaskIns'.
  func makePullTaskInsInterceptors() -> [ClientInterceptor<Flwr_Proto_PullTaskInsRequest, Flwr_Proto_PullTaskInsResponse>]

  /// - Returns: Interceptors to use when invoking 'pushTaskRes'.
  func makePushTaskResInterceptors() -> [ClientInterceptor<Flwr_Proto_PushTaskResRequest, Flwr_Proto_PushTaskResResponse>]

  /// - Returns: Interceptors to use when invoking 'getRun'.
  func makeGetRunInterceptors() -> [ClientInterceptor<Flwr_Proto_GetRunRequest, Flwr_Proto_GetRunResponse>]
}

internal enum Flwr_Proto_FleetClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Fleet",
    fullName: "flwr.proto.Fleet",
    methods: [
      Flwr_Proto_FleetClientMetadata.Methods.createNode,
      Flwr_Proto_FleetClientMetadata.Methods.deleteNode,
      Flwr_Proto_FleetClientMetadata.Methods.ping,
      Flwr_Proto_FleetClientMetadata.Methods.pullTaskIns,
      Flwr_Proto_FleetClientMetadata.Methods.pushTaskRes,
      Flwr_Proto_FleetClientMetadata.Methods.getRun,
    ]
  )

  internal enum Methods {
    internal static let createNode = GRPCMethodDescriptor(
      name: "CreateNode",
      path: "/flwr.proto.Fleet/CreateNode",
      type: GRPCCallType.unary
    )

    internal static let deleteNode = GRPCMethodDescriptor(
      name: "DeleteNode",
      path: "/flwr.proto.Fleet/DeleteNode",
      type: GRPCCallType.unary
    )

    internal static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/flwr.proto.Fleet/Ping",
      type: GRPCCallType.unary
    )

    internal static let pullTaskIns = GRPCMethodDescriptor(
      name: "PullTaskIns",
      path: "/flwr.proto.Fleet/PullTaskIns",
      type: GRPCCallType.unary
    )

    internal static let pushTaskRes = GRPCMethodDescriptor(
      name: "PushTaskRes",
      path: "/flwr.proto.Fleet/PushTaskRes",
      type: GRPCCallType.unary
    )

    internal static let getRun = GRPCMethodDescriptor(
      name: "GetRun",
      path: "/flwr.proto.Fleet/GetRun",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Flwr_Proto_FleetProvider: CallHandlerProvider {
  var interceptors: Flwr_Proto_FleetServerInterceptorFactoryProtocol? { get }

  func createNode(request: Flwr_Proto_CreateNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flwr_Proto_CreateNodeResponse>

  func deleteNode(request: Flwr_Proto_DeleteNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flwr_Proto_DeleteNodeResponse>

  func ping(request: Flwr_Proto_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flwr_Proto_PingResponse>

  /// Retrieve one or more tasks, if possible
  ///
  /// HTTP API path: /api/v1/fleet/pull-task-ins
  func pullTaskIns(request: Flwr_Proto_PullTaskInsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flwr_Proto_PullTaskInsResponse>

  /// Complete one or more tasks, if possible
  ///
  /// HTTP API path: /api/v1/fleet/push-task-res
  func pushTaskRes(request: Flwr_Proto_PushTaskResRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flwr_Proto_PushTaskResResponse>

  func getRun(request: Flwr_Proto_GetRunRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flwr_Proto_GetRunResponse>
}

extension Flwr_Proto_FleetProvider {
  internal var serviceName: Substring {
    return Flwr_Proto_FleetServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_CreateNodeRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_CreateNodeResponse>(),
        interceptors: self.interceptors?.makeCreateNodeInterceptors() ?? [],
        userFunction: self.createNode(request:context:)
      )

    case "DeleteNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_DeleteNodeRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_DeleteNodeResponse>(),
        interceptors: self.interceptors?.makeDeleteNodeInterceptors() ?? [],
        userFunction: self.deleteNode(request:context:)
      )

    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_PingRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "PullTaskIns":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_PullTaskInsRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_PullTaskInsResponse>(),
        interceptors: self.interceptors?.makePullTaskInsInterceptors() ?? [],
        userFunction: self.pullTaskIns(request:context:)
      )

    case "PushTaskRes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_PushTaskResRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_PushTaskResResponse>(),
        interceptors: self.interceptors?.makePushTaskResInterceptors() ?? [],
        userFunction: self.pushTaskRes(request:context:)
      )

    case "GetRun":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_GetRunRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_GetRunResponse>(),
        interceptors: self.interceptors?.makeGetRunInterceptors() ?? [],
        userFunction: self.getRun(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Flwr_Proto_FleetAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Flwr_Proto_FleetServerInterceptorFactoryProtocol? { get }

  func createNode(
    request: Flwr_Proto_CreateNodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flwr_Proto_CreateNodeResponse

  func deleteNode(
    request: Flwr_Proto_DeleteNodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flwr_Proto_DeleteNodeResponse

  func ping(
    request: Flwr_Proto_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flwr_Proto_PingResponse

  /// Retrieve one or more tasks, if possible
  ///
  /// HTTP API path: /api/v1/fleet/pull-task-ins
  func pullTaskIns(
    request: Flwr_Proto_PullTaskInsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flwr_Proto_PullTaskInsResponse

  /// Complete one or more tasks, if possible
  ///
  /// HTTP API path: /api/v1/fleet/push-task-res
  func pushTaskRes(
    request: Flwr_Proto_PushTaskResRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flwr_Proto_PushTaskResResponse

  func getRun(
    request: Flwr_Proto_GetRunRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flwr_Proto_GetRunResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Flwr_Proto_FleetAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Flwr_Proto_FleetServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Flwr_Proto_FleetServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Flwr_Proto_FleetServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_CreateNodeRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_CreateNodeResponse>(),
        interceptors: self.interceptors?.makeCreateNodeInterceptors() ?? [],
        wrapping: { try await self.createNode(request: $0, context: $1) }
      )

    case "DeleteNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_DeleteNodeRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_DeleteNodeResponse>(),
        interceptors: self.interceptors?.makeDeleteNodeInterceptors() ?? [],
        wrapping: { try await self.deleteNode(request: $0, context: $1) }
      )

    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_PingRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "PullTaskIns":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_PullTaskInsRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_PullTaskInsResponse>(),
        interceptors: self.interceptors?.makePullTaskInsInterceptors() ?? [],
        wrapping: { try await self.pullTaskIns(request: $0, context: $1) }
      )

    case "PushTaskRes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_PushTaskResRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_PushTaskResResponse>(),
        interceptors: self.interceptors?.makePushTaskResInterceptors() ?? [],
        wrapping: { try await self.pushTaskRes(request: $0, context: $1) }
      )

    case "GetRun":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flwr_Proto_GetRunRequest>(),
        responseSerializer: ProtobufSerializer<Flwr_Proto_GetRunResponse>(),
        interceptors: self.interceptors?.makeGetRunInterceptors() ?? [],
        wrapping: { try await self.getRun(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Flwr_Proto_FleetServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateNodeInterceptors() -> [ServerInterceptor<Flwr_Proto_CreateNodeRequest, Flwr_Proto_CreateNodeResponse>]

  /// - Returns: Interceptors to use when handling 'deleteNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteNodeInterceptors() -> [ServerInterceptor<Flwr_Proto_DeleteNodeRequest, Flwr_Proto_DeleteNodeResponse>]

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Flwr_Proto_PingRequest, Flwr_Proto_PingResponse>]

  /// - Returns: Interceptors to use when handling 'pullTaskIns'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePullTaskInsInterceptors() -> [ServerInterceptor<Flwr_Proto_PullTaskInsRequest, Flwr_Proto_PullTaskInsResponse>]

  /// - Returns: Interceptors to use when handling 'pushTaskRes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePushTaskResInterceptors() -> [ServerInterceptor<Flwr_Proto_PushTaskResRequest, Flwr_Proto_PushTaskResResponse>]

  /// - Returns: Interceptors to use when handling 'getRun'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRunInterceptors() -> [ServerInterceptor<Flwr_Proto_GetRunRequest, Flwr_Proto_GetRunResponse>]
}

internal enum Flwr_Proto_FleetServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Fleet",
    fullName: "flwr.proto.Fleet",
    methods: [
      Flwr_Proto_FleetServerMetadata.Methods.createNode,
      Flwr_Proto_FleetServerMetadata.Methods.deleteNode,
      Flwr_Proto_FleetServerMetadata.Methods.ping,
      Flwr_Proto_FleetServerMetadata.Methods.pullTaskIns,
      Flwr_Proto_FleetServerMetadata.Methods.pushTaskRes,
      Flwr_Proto_FleetServerMetadata.Methods.getRun,
    ]
  )

  internal enum Methods {
    internal static let createNode = GRPCMethodDescriptor(
      name: "CreateNode",
      path: "/flwr.proto.Fleet/CreateNode",
      type: GRPCCallType.unary
    )

    internal static let deleteNode = GRPCMethodDescriptor(
      name: "DeleteNode",
      path: "/flwr.proto.Fleet/DeleteNode",
      type: GRPCCallType.unary
    )

    internal static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/flwr.proto.Fleet/Ping",
      type: GRPCCallType.unary
    )

    internal static let pullTaskIns = GRPCMethodDescriptor(
      name: "PullTaskIns",
      path: "/flwr.proto.Fleet/PullTaskIns",
      type: GRPCCallType.unary
    )

    internal static let pushTaskRes = GRPCMethodDescriptor(
      name: "PushTaskRes",
      path: "/flwr.proto.Fleet/PushTaskRes",
      type: GRPCCallType.unary
    )

    internal static let getRun = GRPCMethodDescriptor(
      name: "GetRun",
      path: "/flwr.proto.Fleet/GetRun",
      type: GRPCCallType.unary
    )
  }
}
