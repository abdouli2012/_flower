// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: flwr/proto/task.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Flwr_Proto_Task {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var producer: Flwr_Proto_Node {
    get {return _producer ?? Flwr_Proto_Node()}
    set {_producer = newValue}
  }
  /// Returns true if `producer` has been explicitly set.
  var hasProducer: Bool {return self._producer != nil}
  /// Clears the value of `producer`. Subsequent reads from it will return its default value.
  mutating func clearProducer() {self._producer = nil}

  var consumer: Flwr_Proto_Node {
    get {return _consumer ?? Flwr_Proto_Node()}
    set {_consumer = newValue}
  }
  /// Returns true if `consumer` has been explicitly set.
  var hasConsumer: Bool {return self._consumer != nil}
  /// Clears the value of `consumer`. Subsequent reads from it will return its default value.
  mutating func clearConsumer() {self._consumer = nil}

  var createdAt: Double = 0

  var deliveredAt: String = String()

  var pushedAt: Double = 0

  var ttl: Double = 0

  var ancestry: [String] = []

  var taskType: String = String()

  var recordset: Flwr_Proto_RecordSet {
    get {return _recordset ?? Flwr_Proto_RecordSet()}
    set {_recordset = newValue}
  }
  /// Returns true if `recordset` has been explicitly set.
  var hasRecordset: Bool {return self._recordset != nil}
  /// Clears the value of `recordset`. Subsequent reads from it will return its default value.
  mutating func clearRecordset() {self._recordset = nil}

  var error: Flwr_Proto_Error {
    get {return _error ?? Flwr_Proto_Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _producer: Flwr_Proto_Node? = nil
  fileprivate var _consumer: Flwr_Proto_Node? = nil
  fileprivate var _recordset: Flwr_Proto_RecordSet? = nil
  fileprivate var _error: Flwr_Proto_Error? = nil
}

struct Flwr_Proto_TaskIns {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskID: String {
    get {return _storage._taskID}
    set {_uniqueStorage()._taskID = newValue}
  }

  var groupID: String {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  var runID: Int64 {
    get {return _storage._runID}
    set {_uniqueStorage()._runID = newValue}
  }

  var task: Flwr_Proto_Task {
    get {return _storage._task ?? Flwr_Proto_Task()}
    set {_uniqueStorage()._task = newValue}
  }
  /// Returns true if `task` has been explicitly set.
  var hasTask: Bool {return _storage._task != nil}
  /// Clears the value of `task`. Subsequent reads from it will return its default value.
  mutating func clearTask() {_uniqueStorage()._task = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Flwr_Proto_TaskRes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskID: String {
    get {return _storage._taskID}
    set {_uniqueStorage()._taskID = newValue}
  }

  var groupID: String {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  var runID: Int64 {
    get {return _storage._runID}
    set {_uniqueStorage()._runID = newValue}
  }

  var task: Flwr_Proto_Task {
    get {return _storage._task ?? Flwr_Proto_Task()}
    set {_uniqueStorage()._task = newValue}
  }
  /// Returns true if `task` has been explicitly set.
  var hasTask: Bool {return _storage._task != nil}
  /// Clears the value of `task`. Subsequent reads from it will return its default value.
  mutating func clearTask() {_uniqueStorage()._task = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Flwr_Proto_Task: @unchecked Sendable {}
extension Flwr_Proto_TaskIns: @unchecked Sendable {}
extension Flwr_Proto_TaskRes: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "flwr.proto"

extension Flwr_Proto_Task: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Task"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "producer"),
    2: .same(proto: "consumer"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "delivered_at"),
    5: .standard(proto: "pushed_at"),
    6: .same(proto: "ttl"),
    7: .same(proto: "ancestry"),
    8: .standard(proto: "task_type"),
    9: .same(proto: "recordset"),
    10: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._producer) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._consumer) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.createdAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.deliveredAt) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.pushedAt) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.ttl) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.ancestry) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.taskType) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._recordset) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._producer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._consumer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.createdAt != 0 {
      try visitor.visitSingularDoubleField(value: self.createdAt, fieldNumber: 3)
    }
    if !self.deliveredAt.isEmpty {
      try visitor.visitSingularStringField(value: self.deliveredAt, fieldNumber: 4)
    }
    if self.pushedAt != 0 {
      try visitor.visitSingularDoubleField(value: self.pushedAt, fieldNumber: 5)
    }
    if self.ttl != 0 {
      try visitor.visitSingularDoubleField(value: self.ttl, fieldNumber: 6)
    }
    if !self.ancestry.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ancestry, fieldNumber: 7)
    }
    if !self.taskType.isEmpty {
      try visitor.visitSingularStringField(value: self.taskType, fieldNumber: 8)
    }
    try { if let v = self._recordset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_Task, rhs: Flwr_Proto_Task) -> Bool {
    if lhs._producer != rhs._producer {return false}
    if lhs._consumer != rhs._consumer {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.deliveredAt != rhs.deliveredAt {return false}
    if lhs.pushedAt != rhs.pushedAt {return false}
    if lhs.ttl != rhs.ttl {return false}
    if lhs.ancestry != rhs.ancestry {return false}
    if lhs.taskType != rhs.taskType {return false}
    if lhs._recordset != rhs._recordset {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_TaskIns: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TaskIns"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "run_id"),
    4: .same(proto: "task"),
  ]

  fileprivate class _StorageClass {
    var _taskID: String = String()
    var _groupID: String = String()
    var _runID: Int64 = 0
    var _task: Flwr_Proto_Task? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _taskID = source._taskID
      _groupID = source._groupID
      _runID = source._runID
      _task = source._task
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._taskID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._groupID) }()
        case 3: try { try decoder.decodeSingularSInt64Field(value: &_storage._runID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._task) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._taskID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taskID, fieldNumber: 1)
      }
      if !_storage._groupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupID, fieldNumber: 2)
      }
      if _storage._runID != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._runID, fieldNumber: 3)
      }
      try { if let v = _storage._task {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_TaskIns, rhs: Flwr_Proto_TaskIns) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._taskID != rhs_storage._taskID {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._runID != rhs_storage._runID {return false}
        if _storage._task != rhs_storage._task {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Flwr_Proto_TaskRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TaskRes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "run_id"),
    4: .same(proto: "task"),
  ]

  fileprivate class _StorageClass {
    var _taskID: String = String()
    var _groupID: String = String()
    var _runID: Int64 = 0
    var _task: Flwr_Proto_Task? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _taskID = source._taskID
      _groupID = source._groupID
      _runID = source._runID
      _task = source._task
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._taskID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._groupID) }()
        case 3: try { try decoder.decodeSingularSInt64Field(value: &_storage._runID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._task) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._taskID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taskID, fieldNumber: 1)
      }
      if !_storage._groupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupID, fieldNumber: 2)
      }
      if _storage._runID != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._runID, fieldNumber: 3)
      }
      try { if let v = _storage._task {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Flwr_Proto_TaskRes, rhs: Flwr_Proto_TaskRes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._taskID != rhs_storage._taskID {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._runID != rhs_storage._runID {return false}
        if _storage._task != rhs_storage._task {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
