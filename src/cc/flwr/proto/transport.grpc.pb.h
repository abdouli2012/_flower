// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transport.proto
// Original file comments:
// Copyright 2020 Adap GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_transport_2eproto__INCLUDED
#define GRPC_transport_2eproto__INCLUDED

#include "transport.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace flower {
namespace transport {

class FlowerService final {
 public:
  static constexpr char const* service_full_name() {
    return "flower.transport.FlowerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>> Join(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>>(JoinRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>> AsyncJoin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>>(AsyncJoinRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>> PrepareAsyncJoin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>>(PrepareAsyncJoinRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Join(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::flower::transport::ClientMessage,::flower::transport::ServerMessage>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* JoinRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* AsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>> Join(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>>(JoinRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>> AsyncJoin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>>(AsyncJoinRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>> PrepareAsyncJoin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>>(PrepareAsyncJoinRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Join(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::flower::transport::ClientMessage,::flower::transport::ServerMessage>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* JoinRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* AsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Join_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Join() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Join<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Join() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>(
          [this] { return this->Join(); }));
    }
    ~ExperimentalWithCallbackMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* Join() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>;}
  };
  typedef ExperimentalWithCallbackMethod_Join<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Join() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Join() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Join() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Join(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Join() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace transport
}  // namespace flower


#endif  // GRPC_transport_2eproto__INCLUDED
