// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transport.proto

#include "transport.pb.h"
#include "transport.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flower {
namespace transport {

static const char* FlowerService_method_names[] = {
  "/flower.transport.FlowerService/Join",
};

std::unique_ptr< FlowerService::Stub> FlowerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FlowerService::Stub> stub(new FlowerService::Stub(channel));
  return stub;
}

FlowerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Join_(FlowerService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* FlowerService::Stub::JoinRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>::Create(channel_.get(), rpcmethod_Join_, context);
}

void FlowerService::Stub::experimental_async::Join(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::flower::transport::ClientMessage,::flower::transport::ServerMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::flower::transport::ClientMessage,::flower::transport::ServerMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_Join_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* FlowerService::Stub::AsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>::Create(channel_.get(), cq, rpcmethod_Join_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>* FlowerService::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>::Create(channel_.get(), cq, rpcmethod_Join_, context, false, nullptr);
}

FlowerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowerService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FlowerService::Service, ::flower::transport::ClientMessage, ::flower::transport::ServerMessage>(
          std::mem_fn(&FlowerService::Service::Join), this)));
}

FlowerService::Service::~Service() {
}

::grpc::Status FlowerService::Service::Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::flower::transport::ServerMessage, ::flower::transport::ClientMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flower
}  // namespace transport

