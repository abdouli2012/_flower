# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-29 14:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:9
msgid "Build a strategy from scratch"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:11
msgid ""
"Welcome to the third part of the Flower federated learning tutorial. In "
"previous parts of this tutorial, we introduced federated learning with "
"PyTorch and Flower (`part 1 <https://flower.dev/docs/framework/tutorial-"
"get-started-with-flower-pytorch.html>`__) and we learned how strategies "
"can be used to customize the execution on both the server and the clients"
" (`part 2 <https://flower.dev/docs/framework/tutorial-use-a-federated-"
"learning-strategy-pytorch.html>`__)."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:13
msgid ""
"In this notebook, we'll continue to customize the federated learning "
"system we built previously by creating a custom version of FedAvg (again,"
" using `Flower <https://flower.dev/>`__ and `PyTorch "
"<https://pytorch.org/>`__)."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:15
msgid ""
"`Star Flower on GitHub <https://github.com/adap/flower>`__ ‚≠êÔ∏è and join "
"the Flower community on Slack to connect, ask questions, and get help: "
"`Join Slack <https://flower.dev/join-slack>`__ üåº We'd love to hear from "
"you in the ``#introductions`` channel! And if anything is unclear, head "
"over to the ``#questions`` channel."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:17
msgid "Let's build a new ``Strategy`` from scratch!"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:29
msgid "Preparation"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:31
msgid ""
"Before we begin with the actual code, let's make sure that we have "
"everything we need."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:43
msgid "Installing dependencies"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:45
msgid "First, we install the necessary packages:"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:65
msgid ""
"Now that we have all dependencies installed, we can import everything we "
"need for this tutorial:"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:101
msgid ""
"It is possible to switch to a runtime that has GPU acceleration enabled "
"(on Google Colab: ``Runtime > Change runtime type > Hardware acclerator: "
"GPU > Save``). Note, however, that Google Colab is not always able to "
"offer GPU acceleration. If you see an error related to GPU availability "
"in one of the following sections, consider switching back to CPU-based "
"execution by setting ``DEVICE = torch.device(\"cpu\")``. If the runtime "
"has GPU acceleration enabled, you should see the output ``Training on "
"cuda``, otherwise it'll say ``Training on cpu``."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:114
msgid "Data loading"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:116
msgid ""
"Let's now load the CIFAR-10 training and test set, partition them into "
"ten smaller datasets (each split into training and validation set), and "
"wrap everything in their own ``DataLoader``. We introduce a new parameter"
" ``num_clients`` which allows us to call ``load_datasets`` with different"
" numbers of clients."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:167
msgid "Model training/evaluation"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:169
msgid ""
"Let's continue with the usual model definition (including "
"``set_parameters`` and ``get_parameters``), training and test functions:"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:258
msgid "Flower client"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:260
msgid ""
"To implement the Flower client, we (again) create a subclass of "
"``flwr.client.NumPyClient`` and implement the three methods "
"``get_parameters``, ``fit``, and ``evaluate``. Here, we also pass the "
"``cid`` to the client and use it log additional details:"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:308
msgid "Let's test what we have so far before we continue:"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:339
msgid "Build a Strategy from scratch"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:341
msgid ""
"Let‚Äôs overwrite the ``configure_fit`` method such that it passes a higher"
" learning rate (potentially also other hyperparameters) to the optimizer "
"of a fraction of the clients. We will keep the sampling of the clients as"
" it is in ``FedAvg`` and then change the configuration dictionary (one of"
" the ``FitIns`` attributes)."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:507
msgid ""
"The only thing left is to use the newly created custom Strategy "
"``FedCustom`` when starting the experiment:"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:534
msgid "Recap"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:536
msgid ""
"In this notebook, we‚Äôve seen how to implement a custom strategy. A custom"
" strategy enables granular control over client node configuration, result"
" aggregation, and more. To define a custom strategy, you only have to "
"overwrite the abstract methods of the (abstract) base class ``Strategy``."
" To make custom strategies even more powerful, you can pass custom "
"functions to the constructor of your new class (``__init__``) and then "
"call these functions whenever needed."
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:548
msgid "Next steps"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:550
msgid ""
"Before you continue, make sure to join the Flower community on Slack: "
"`Join Slack <https://flower.dev/join-slack/>`__"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:552
msgid ""
"There's a dedicated ``#questions`` channel if you need help, but we'd "
"also love to hear who you are in ``#introductions``!"
msgstr ""

#: ../../source/tutorial-build-a-strategy-from-scratch-pytorch.ipynb:554
msgid ""
"The `Flower Federated Learning Tutorial - Part 4 "
"<https://flower.dev/docs/framework/tutorial-customize-the-client-"
"pytorch.html>`__ introduces ``Client``, the flexible API underlying "
"``NumPyClient``."
msgstr ""

