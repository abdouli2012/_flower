# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-29 14:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:9
msgid "Get started with Flower"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:11
msgid "Welcome to the Flower federated learning tutorial!"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:13
msgid ""
"In this notebook, we'll build a federated learning system using Flower "
"and PyTorch. In part 1, we use PyTorch for the model training pipeline "
"and data loading. In part 2, we continue to federate the PyTorch-based "
"pipeline using Flower."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:15
msgid ""
"`Star Flower on GitHub <https://github.com/adap/flower>`__ ‚≠êÔ∏è and join "
"the Flower community on Slack to connect, ask questions, and get help: "
"`Join Slack <https://flower.dev/join-slack>`__ üåº We'd love to hear from "
"you in the ``#introductions`` channel! And if anything is unclear, head "
"over to the ``#questions`` channel."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:17
msgid "Let's get stated!"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:29
msgid "Step 0: Preparation"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:31
msgid ""
"Before we begin with any actual code, let's make sure that we have "
"everything we need."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:43
msgid "Installing dependencies"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:45
msgid ""
"Next, we install the necessary packages for PyTorch (``torch`` and "
"``torchvision``) and Flower (``flwr``):"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:65
msgid ""
"Now that we have all dependencies installed, we can import everything we "
"need for this tutorial:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:104
msgid ""
"It is possible to switch to a runtime that has GPU acceleration enabled "
"(on Google Colab: ``Runtime > Change runtime type > Hardware acclerator: "
"GPU > Save``). Note, however, that Google Colab is not always able to "
"offer GPU acceleration. If you see an error related to GPU availability "
"in one of the following sections, consider switching back to CPU-based "
"execution by setting ``DEVICE = torch.device(\"cpu\")``. If the runtime "
"has GPU acceleration enabled, you should see the output ``Training on "
"cuda``, otherwise it'll say ``Training on cpu``."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:117
msgid "Loading the data"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:119
msgid ""
"Federated learning can be applied to many different types of tasks across"
" different domains. In this tutorial, we introduce federated learning by "
"training a simple convolutional neural network (CNN) on the popular "
"CIFAR-10 dataset. CIFAR-10 can be used to train image classifiers that "
"distinguish between images from ten different classes:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:150
msgid ""
"We simulate having multiple datasets from multiple organizations (also "
"called the \"cross-silo\" setting in federated learning) by splitting the"
" original CIFAR-10 dataset into multiple partitions. Each partition will "
"represent the data from a single organization. We're doing this purely "
"for experimentation purposes, in the real world there's no need for data "
"splitting because each organization already has their own data (so the "
"data is naturally partitioned)."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:152
msgid ""
"Each organization will act as a client in the federated learning system. "
"So having ten organizations participate in a federation means having ten "
"clients connected to the federated learning server:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:172
msgid ""
"Let's now load the CIFAR-10 training and test set, partition them into "
"ten smaller datasets (each split into training and validation set), and "
"wrap the resulting partitions by creating a PyTorch ``DataLoader`` for "
"each of them:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:222
msgid ""
"We now have a list of ten training sets and ten validation sets "
"(``trainloaders`` and ``valloaders``) representing the data of ten "
"different organizations. Each ``trainloader``/``valloader`` pair contains"
" 4500 training examples and 500 validation examples. There's also a "
"single ``testloader`` (we did not split the test set). Again, this is "
"only necessary for building research or educational systems, actual "
"federated learning systems have their data naturally distributed across "
"multiple partitions."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:225
msgid ""
"Let's take a look at the first batch of images and labels in the first "
"training set (i.e., ``trainloaders[0]``) before we move on:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:264
msgid ""
"The output above shows a random batch of images from the first "
"``trainloader`` in our list of ten ``trainloaders``. It also prints the "
"labels associated with each image (i.e., one of the ten possible labels "
"we've seen above). If you run the cell again, you should see another "
"batch of images."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:276
msgid "Step 1: Centralized Training with PyTorch"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:287
msgid ""
"Next, we're going to use PyTorch to define a simple convolutional neural "
"network. This introduction assumes basic familiarity with PyTorch, so it "
"doesn't cover the PyTorch-related aspects in full detail. If you want to "
"dive deeper into PyTorch, we recommend `DEEP LEARNING WITH PYTORCH: A 60 "
"MINUTE BLITZ "
"<https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html>`__."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:299
msgid "Defining the model"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:301
msgid ""
"We use the simple CNN described in the `PyTorch tutorial "
"<https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#define-a"
"-convolutional-neural-network>`__:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:338
msgid "Let's continue with the usual training and test functions:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:398
msgid "Training the model"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:400
msgid ""
"We now have all the basic building blocks we need: a dataset, a model, a "
"training function, and a test function. Let's put them together to train "
"the model on the dataset of one of our organizations "
"(``trainloaders[0]``). This simulates the reality of most machine "
"learning projects today: each organization has their own data and trains "
"models only on this internal data:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:430
msgid ""
"Training the simple CNN on our CIFAR-10 split for 5 epochs should result "
"in a test set accuracy of about 41%, which is not good, but at the same "
"time, it doesn't really matter for the purposes of this tutorial. The "
"intent was just to show a simplistic centralized training pipeline that "
"sets the stage for what comes next - federated learning!"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:442
msgid "Step 2: Federated Learning with Flower"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:444
msgid ""
"Step 1 demonstrated a simple centralized training pipeline. All data was "
"in one place (i.e., a single ``trainloader`` and a single ``valloader``)."
" Next, we'll simulate a situation where we have multiple datasets in "
"multiple organizations and where we train a model over these "
"organizations using federated learning."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:456
msgid "Updating model parameters"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:458
msgid ""
"In federated learning, the server sends the global model parameters to "
"the client, and the client updates the local model with the parameters "
"received from the server. It then trains the model on the local data "
"(which changes the model parameters locally) and sends the "
"updated/changed model parameters back to the server (or, alternatively, "
"it sends just the gradients back to the server, not the full model "
"parameters)."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:460
msgid ""
"We need two helper functions to update the local model with parameters "
"received from the server and to get the updated model parameters from the"
" local model: ``set_parameters`` and ``get_parameters``. The following "
"two functions do just that for the PyTorch model above."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:462
msgid ""
"The details of how this works are not really important here (feel free to"
" consult the PyTorch documentation if you want to learn more). In "
"essence, we use ``state_dict`` to access PyTorch model parameter tensors."
" The parameter tensors are then converted to/from a list of NumPy "
"ndarray's (which Flower knows how to serialize/deserialize):"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:490
msgid "Implementing a Flower client"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:492
msgid ""
"With that out of the way, let's move on to the interesting part. "
"Federated learning systems consist of a server and multiple clients. In "
"Flower, we create clients by implementing subclasses of "
"``flwr.client.Client`` or ``flwr.client.NumPyClient``. We use "
"``NumPyClient`` in this tutorial because it is easier to implement and "
"requires us to write less boilerplate."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:494
msgid ""
"To implement the Flower client, we create a subclass of "
"``flwr.client.NumPyClient`` and implement the three methods "
"``get_parameters``, ``fit``, and ``evaluate``:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:496
msgid "``get_parameters``: Return the current local model parameters"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:497
msgid ""
"``fit``: Receive model parameters from the server, train the model "
"parameters on the local data, and return the (updated) model parameters "
"to the server"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:498
msgid ""
"``evaluate``: Receive model parameters from the server, evaluate the "
"model parameters on the local data, and return the evaluation result to "
"the server"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:500
msgid ""
"We mentioned that our clients will use the previously defined PyTorch "
"components for model training and evaluation. Let's see a simple Flower "
"client implementation that brings everything together:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:537
msgid ""
"Our class ``FlowerClient`` defines how local training/evaluation will be "
"performed and allows Flower to call the local training/evaluation through"
" ``fit`` and ``evaluate``. Each instance of ``FlowerClient`` represents a"
" *single client* in our federated learning system. Federated learning "
"systems have multiple clients (otherwise, there's not much to federate), "
"so each client will be represented by its own instance of "
"``FlowerClient``. If we have, for example, three clients in our workload,"
" then we'd have three instances of ``FlowerClient``. Flower calls "
"``FlowerClient.fit`` on the respective instance when the server selects a"
" particular client for training (and ``FlowerClient.evaluate`` for "
"evaluation)."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:541
msgid "Using the Virtual Client Engine"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:543
msgid ""
"In this notebook, we want to simulate a federated learning system with 10"
" clients on a single machine. This means that the server and all 10 "
"clients will live on a single machine and share resources such as CPU, "
"GPU, and memory. Having 10 clients would mean having 10 instances of "
"``FlowerClient`` in memory. Doing this on a single machine can quickly "
"exhaust the available memory resources, even if only a subset of these "
"clients participates in a single round of federated learning."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:545
msgid ""
"In addition to the regular capabilities where server and clients run on "
"multiple machines, Flower, therefore, provides special simulation "
"capabilities that create ``FlowerClient`` instances only when they are "
"actually necessary for training or evaluation. To enable the Flower "
"framework to create clients when necessary, we need to implement a "
"function called ``client_fn`` that creates a ``FlowerClient`` instance on"
" demand. Flower calls ``client_fn`` whenever it needs an instance of one "
"particular client to call ``fit`` or ``evaluate`` (those instances are "
"usually discarded after use, so they should not keep any local state). "
"Clients are identified by a client ID, or short ``cid``. The ``cid`` can "
"be used, for example, to load different local data partitions for "
"different clients, as can be seen below:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:580
msgid "Starting the training"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:582
msgid ""
"We now have the class ``FlowerClient`` which defines client-side "
"training/evaluation and ``client_fn`` which allows Flower to create "
"``FlowerClient`` instances whenever it needs to call ``fit`` or "
"``evaluate`` on one particular client. The last step is to start the "
"actual simulation using ``flwr.simulation.start_simulation``."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:584
msgid ""
"The function ``start_simulation`` accepts a number of arguments, amongst "
"them the ``client_fn`` used to create ``FlowerClient`` instances, the "
"number of clients to simulate (``num_clients``), the number of federated "
"learning rounds (``num_rounds``), and the strategy. The strategy "
"encapsulates the federated learning approach/algorithm, for example, "
"*Federated Averaging* (FedAvg)."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:586
msgid ""
"Flower has a number of built-in strategies, but we can also use our own "
"strategy implementations to customize nearly all aspects of the federated"
" learning approach. For this example, we use the built-in ``FedAvg`` "
"implementation and customize it using a few basic parameters. The last "
"step is the actual call to ``start_simulation`` which - you guessed it - "
"starts the simulation:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:628
msgid "Behind the scenes"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:630
msgid "So how does this work? How does Flower execute this simulation?"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:632
#, python-format
msgid ""
"When we call ``start_simulation``, we tell Flower that there are 10 "
"clients (``num_clients=10``). Flower then goes ahead an asks the "
"``FedAvg`` strategy to select clients. ``FedAvg`` knows that it should "
"select 100% of the available clients (``fraction_fit=1.0``), so it goes "
"ahead and selects 10 random clients (i.e., 100% of 10)."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:634
msgid ""
"Flower then asks the selected 10 clients to train the model. When the "
"server receives the model parameter updates from the clients, it hands "
"those updates over to the strategy (*FedAvg*) for aggregation. The "
"strategy aggregates those updates and returns the new global model, which"
" then gets used in the next round of federated learning."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:646
msgid "Where's the accuracy?"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:648
msgid ""
"You may have noticed that all metrics except for ``losses_distributed`` "
"are empty. Where did the ``{\"accuracy\": float(accuracy)}`` go?"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:650
msgid ""
"Flower can automatically aggregate losses returned by individual clients,"
" but it cannot do the same for metrics in the generic metrics dictionary "
"(the one with the ``accuracy`` key). Metrics dictionaries can contain "
"very different kinds of metrics and even key/value pairs that are not "
"metrics at all, so the framework does not (and can not) know how to "
"handle these automatically."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:652
msgid ""
"As users, we need to tell the framework how to handle/aggregate these "
"custom metrics, and we do so by passing metric aggregation functions to "
"the strategy. The strategy will then call these functions whenever it "
"receives fit or evaluate metrics from clients. The two possible functions"
" are ``fit_metrics_aggregation_fn`` and "
"``evaluate_metrics_aggregation_fn``."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:654
msgid ""
"Let's create a simple weighted averaging function to aggregate the "
"``accuracy`` metric we return from ``evaluate``:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:680
msgid ""
"The only thing left to do is to tell the strategy to call this function "
"whenever it receives evaluation metric dictionaries from the clients:"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:717
msgid ""
"We now have a full system that performs federated training and federated "
"evaluation. It uses the ``weighted_average`` function to aggregate custom"
" evaluation metrics and calculates a single ``accuracy`` metric across "
"all clients on the server side."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:719
msgid ""
"The other two categories of metrics (``losses_centralized`` and "
"``metrics_centralized``) are still empty because they only apply when "
"centralized evaluation is being used. Part two of the Flower tutorial "
"will cover centralized evaluation."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:731
msgid "Final remarks"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:733
msgid ""
"Congratulations, you just trained a convolutional neural network, "
"federated over 10 clients! With that, you understand the basics of "
"federated learning with Flower. The same approach you've seen can be used"
" with other machine learning frameworks (not just PyTorch) and tasks (not"
" just CIFAR-10 images classification), for example NLP with Hugging Face "
"Transformers or speech with SpeechBrain."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:735
msgid ""
"In the next notebook, we're going to cover some more advanced concepts. "
"Want to customize your strategy? Initialize parameters on the server "
"side? Or evaluate the aggregated model on the server side? We'll cover "
"all this and more in the next tutorial."
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:747
msgid "Next steps"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:749
msgid ""
"Before you continue, make sure to join the Flower community on Slack: "
"`Join Slack <https://flower.dev/join-slack/>`__"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:751
msgid ""
"There's a dedicated ``#questions`` channel if you need help, but we'd "
"also love to hear who you are in ``#introductions``!"
msgstr ""

#: ../../source/tutorial-get-started-with-flower-pytorch.ipynb:753
msgid ""
"The `Flower Federated Learning Tutorial - Part 2 "
"<https://flower.dev/docs/framework/tutorial-use-a-federated-learning-"
"strategy-pytorch.html>`__ goes into more depth about strategies and all "
"the advanced things you can build with them."
msgstr ""

