# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-09 15:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/logging.rst:2
msgid "Logging"
msgstr ""

#: ../../source/logging.rst:4
msgid ""
"The Flower logger keeps track of all core events that take place in "
"federated learning workloads. It presents information by default "
"following a standard message format:"
msgstr ""

#: ../../source/logging.rst:13
msgid ""
"containing relevant information including: log message level (e.g. "
":code:`INFO`, :code:`DEBUG`), a timestamp, the line where the logging "
"took place from, as well as the log message itself. In this way, the "
"logger would typically display information on your terminal as follows:"
msgstr ""

#: ../../source/logging.rst:34
msgid "Saving Log to File"
msgstr ""

#: ../../source/logging.rst:36
msgid ""
"By default, the Flower log is outputted to the terminal where you launch "
"your Federated Learning workload from. This applies for both gRPC-based "
"federation (i.e. when you do :code:`fl.server.start_server`) and when "
"using the :code:`VirtualClientEngine` (i.e. when you do "
":code:`fl.simulation.start_simulation`). In some situations you might "
"want to save this log to disk. You can do so by calling the "
"`fl.common.logger.configure() "
"<https://github.com/adap/flower/blob/main/src/py/flwr/common/logger.py>`_"
" function. For example:"
msgstr ""

#: ../../source/logging.rst:53
msgid ""
"With the above, Flower will record the log you see on your terminal to "
":code:`log.txt`. This file will be created in the same directory as were "
"you are running the code from. If we inspect we see the log above is also"
" recorded but prefixing with :code:`identifier` each line:"
msgstr ""

#: ../../source/logging.rst:74
msgid "Logging Your Own Messages"
msgstr ""

#: ../../source/logging.rst:76
msgid ""
"You might expand the information shown by default with the Flower logger "
"by adding more messages relevant to your application. You can achieve "
"this easily as follows."
msgstr ""

#: ../../source/logging.rst:102
msgid ""
"In this way your logger will show, in addition to the default messages, "
"the ones introduced by the clients as specified above."
msgstr ""

#: ../../source/logging.rst:128
msgid "Logging to a Remote Service"
msgstr ""

#: ../../source/logging.rst:130
msgid ""
"The :code:`fl.common.logger.configure` function, also allows specifying a"
" host to which logs can be pushed (via :code:`POST`) through a native "
"Python :code:`logging.handler.HTTPHandler`. This is a particularly useful"
" feature in :code:`gRPC`-based Federated Learning workloads where "
"otherwise gathering logs from all entities (i.e. the server and the "
"clients) might be cumbersome. Note that in Flower simulation, the server "
"automatically displays all logs. You can still specify a "
":code:`HTTPHandler` should you whish to backup or analyze the logs "
"somewhere else."
msgstr ""

