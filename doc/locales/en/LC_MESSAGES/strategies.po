# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-09 15:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/strategies.rst:2
msgid "Strategies"
msgstr ""

#: ../../source/strategies.rst:4
msgid ""
"Flower allows full customization of the learning process through the "
":code:`Strategy` abstraction. A number of built-in strategies are "
"provided in the core framework."
msgstr ""

#: ../../source/strategies.rst:6
msgid ""
"There are three ways to customize the way Flower orchestrates the "
"learning process on the server side:"
msgstr ""

#: ../../source/strategies.rst:8
msgid "Use an existing strategy, for example, :code:`FedAvg`"
msgstr ""

#: ../../source/strategies.rst:9 ../../source/strategies.rst:40
msgid "Customize an existing strategy with callback functions"
msgstr ""

#: ../../source/strategies.rst:10 ../../source/strategies.rst:87
msgid "Implement a novel strategy"
msgstr ""

#: ../../source/strategies.rst:14
msgid "Use an existing strategy"
msgstr ""

#: ../../source/strategies.rst:16
msgid ""
"Flower comes with a number of popular federated learning strategies "
"built-in. A built-in strategy can be instantiated as follows:"
msgstr ""

#: ../../source/strategies.rst:25
msgid ""
"This creates a strategy with all parameters left at their default values "
"and passes it to the :code:`start_server` function. It is usually "
"recommended to adjust a few parameters during instantiation:"
msgstr ""

#: ../../source/strategies.rst:42
msgid ""
"Existing strategies provide several ways to customize their behaviour. "
"Callback functions allow strategies to call user-provided code during "
"execution."
msgstr ""

#: ../../source/strategies.rst:45
msgid "Configuring client fit and client evaluate"
msgstr ""

#: ../../source/strategies.rst:47
msgid ""
"The server can pass new configuration values to the client each round by "
"providing a function to :code:`on_fit_config_fn`. The provided function "
"will be called by the strategy and must return a dictionary of "
"configuration key values pairs that will be sent to the client. It must "
"return a dictionary of arbitraty configuration values  :code:`client.fit`"
" and :code:`client.evaluate` functions during each round of federated "
"learning."
msgstr ""

#: ../../source/strategies.rst:75
msgid ""
"The :code:`on_fit_config_fn` can be used to pass arbitrary configuration "
"values from server to client, and poetentially change these values each "
"round, for example, to adjust the learning rate. The client will receive "
"the dictionary returned by the :code:`on_fit_config_fn` in its own "
":code:`client.fit()` function."
msgstr ""

#: ../../source/strategies.rst:78
msgid ""
"Similar to :code:`on_fit_config_fn`, there is also "
":code:`on_evaluate_config_fn` to customize the configuration sent to "
":code:`client.evaluate()`"
msgstr ""

#: ../../source/strategies.rst:81
msgid "Configuring server-side evaluation"
msgstr ""

#: ../../source/strategies.rst:83
msgid ""
"Server-side evaluation can be enabled by passing an evaluation function "
"to :code:`evaluate_fn`."
msgstr ""

#: ../../source/strategies.rst:89
msgid ""
"Writing a fully custom strategy is a bit more involved, but it provides "
"the most flexibility. Read the `Implementing Strategies <implementing-"
"strategies.html>`_ guide to learn more."
msgstr ""

