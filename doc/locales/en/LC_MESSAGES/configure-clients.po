# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-09 15:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/configure-clients.rst:2
msgid "Configure Clients"
msgstr ""

#: ../../source/configure-clients.rst:4
msgid ""
"Along with model parameters, Flower can send configuration values to "
"clients. Configuration values can be used for various purposes. They are,"
" for example, a popular way to control client-side hyperparameters from "
"the server."
msgstr ""

#: ../../source/configure-clients.rst:7
msgid "Configuration values"
msgstr ""

#: ../../source/configure-clients.rst:9
msgid ""
"Configuration values are represented as a dictionary with ``str`` keys "
"and values of type ``bool``, ``bytes``, ``double`` (64-bit precision "
"float), ``int``, or ``str`` (or equivalent types in different languages)."
" Here is an example of a configuration dictionary in Python:"
msgstr ""

#: ../../source/configure-clients.rst:20
msgid ""
"Flower serializes these configuration dictionaries (or *config dict* for "
"short) to their ProtoBuf representation, transports them to the client "
"using gRPC, and then deserializes them back to Python dictionaries."
msgstr ""

#: ../../source/configure-clients.rst:24
msgid ""
"Currently, there is no support for directly sending collection types "
"(e.g., ``Set``, ``List``, ``Map``) as values in configuration "
"dictionaries. There are several workarounds to send collections as values"
" by converting them to one of the supported value types (and converting "
"them back on the client-side)."
msgstr ""

#: ../../source/configure-clients.rst:26
msgid ""
"One can, for example, convert a list of floating-point numbers to a JSON "
"string, then send the JSON string using the configuration dictionary, and"
" then convert the JSON string back to a list of floating-point numbers on"
" the client."
msgstr ""

#: ../../source/configure-clients.rst:30
msgid "Configuration through built-in strategies"
msgstr ""

#: ../../source/configure-clients.rst:32
msgid ""
"The easiest way to send configuration values to clients is to use a "
"built-in strategy like :code:`FedAvg`. Built-in strategies support so-"
"called configuration functions. A configuration function is a function "
"that the built-in strategy calls to get the configuration dictionary for "
"the current round. It then forwards the configuration dictionary to all "
"the clients selected during that round."
msgstr ""

#: ../../source/configure-clients.rst:34
msgid ""
"Let's start with a simple example. Imagine we want to send (a) the batch "
"size that the client should use, (b) the current global round of "
"federated learning, and (c) the number of epochs to train on the client-"
"side. Our configuration function could look like this:"
msgstr ""

#: ../../source/configure-clients.rst:47
msgid ""
"To make the built-in strategies use this function, we can pass it to "
"``FedAvg`` during initialization using the parameter "
":code:`on_fit_config_fn`:"
msgstr ""

#: ../../source/configure-clients.rst:56
msgid "One the client side, we receive the configuration dictionary in ``fit``:"
msgstr ""

#: ../../source/configure-clients.rst:67
msgid ""
"There is also an `on_evaluate_config_fn` to configure evaluation, which "
"works the same way. They are separate functions because one might want to"
" send different configuration values to `evaluate` (for example, to use a"
" different batch size)."
msgstr ""

#: ../../source/configure-clients.rst:69
msgid ""
"The built-in strategies call this function every round (that is, every "
"time `Strategy.configure_fit` or `Strategy.configure_evaluate` runs). "
"Calling `on_evaluate_config_fn` every round allows us to vary/change the "
"config dict over consecutive rounds. If we wanted to implement a "
"hyperparameter schedule, for example, to increase the number of local "
"epochs during later rounds, we could do the following:"
msgstr ""

#: ../../source/configure-clients.rst:82
msgid "The :code:`FedAvg` strategy will call this function *every round*."
msgstr ""

#: ../../source/configure-clients.rst:85
msgid "Configuring individual clients"
msgstr ""

#: ../../source/configure-clients.rst:87
msgid ""
"In some cases, it is necessary to send different configuration values to "
"different clients."
msgstr ""

#: ../../source/configure-clients.rst:89
msgid ""
"This can be achieved by customizing an existing strategy or by "
"`implementing a custom strategy from scratch <https://flower.dev/docs"
"/implementing-strategies.html>`_. Here's a nonsensical example that "
"customizes :code:`FedAvg` by adding a custom ``\"hello\": \"world\"`` "
"configuration key/value pair to the config dict of a *single client* "
"(only the first client in the list, the other clients in this round to "
"not receive this \"special\" config value):"
msgstr ""

