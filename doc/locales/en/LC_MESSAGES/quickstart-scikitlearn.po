# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-09 15:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/quickstart-scikitlearn.rst:5
msgid "Quickstart scikit-learn"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:7
msgid ""
"In this tutorial, we will learn how to train a :code:`Logistic "
"Regression` model on MNIST using Flower and scikit-learn."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:9
msgid ""
"It is recommended to create a virtual environment and run everything "
"within this `virtualenv <https://flower.dev/docs/recommended-env-"
"setup.html>`_."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:11
msgid ""
"Our example consists of one *server* and two *clients* all having the "
"same model."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:13
msgid ""
"*Clients* are responsible for generating individual model parameter "
"updates for the model based on their local datasets. These updates are "
"then sent to the *server* which will aggregate them to produce an updated"
" global model. Finally, the *server* sends this improved version of the "
"model back to each *client*. A complete cycle of parameters updates is "
"called a *round*."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:17
msgid ""
"Now that we have a rough idea of what is going on, let's get started. We "
"first need to install Flower. You can do this by running:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:23
msgid "Since we want to use scikt-learn, let's go ahead and install it:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:29
msgid "Or simply install all dependencies using Poetry:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:37
msgid "Flower Client"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:39
msgid ""
"Now that we have all our dependencies installed, let's run a simple "
"distributed training with two clients and one server. However, before "
"setting up the client and server, we will define all functionalities that"
" we need for our federated learning setup within :code:`utils.py`. The "
":code:`utils.py` contains different functions defining all the machine "
"learning basics:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:42
msgid ":code:`get_model_parameters()`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:43
msgid "Returns the paramters of a :code:`sklearn` LogisticRegression model"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:44
msgid ":code:`set_model_params()`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:45
msgid "Sets the parameters of a :code:`sklean` LogisticRegression model"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:46
msgid ":code:`set_initial_params()`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:47
msgid "Initializes the model parameters that the Flower server will ask for"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:48
msgid ":code:`load_mnist()`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:49
msgid "Loads the MNIST dataset using OpenML"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:50
msgid ":code:`shuffle()`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:51
msgid "Shuffles data and its label"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:53
msgid ":code:`partition()`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:53
msgid "Splits datasets into a number of partitions"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:55
msgid ""
"Please check out :code:`utils.py` `here "
"<https://github.com/adap/flower/blob/main/examples/sklearn-logreg-"
"mnist/utils.py>`_ for more details. The pre-defined functions are used in"
" the :code:`client.py` and imported. The :code:`client.py` also requires "
"to import several packages such as Flower and scikit-learn:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:70
msgid ""
"We load the MNIST dataset from `OpenML <https://www.openml.org/d/554>`_, "
"a popular image classification dataset of handwritten digits for machine "
"learning. The utility :code:`utils.load_mnist()` downloads the training "
"and test data. The training set is split afterwards into 10 partitions "
"with :code:`utils.partition()`."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:82
msgid ""
"Next, the logistic regression model is defined and initialized with "
":code:`utils.set_initial_params()`."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:94
msgid ""
"The Flower server interacts with clients through an interface called "
":code:`Client`. When the server selects a particular client for training,"
" it sends training instructions over the network. The client receives "
"those instructions and calls one of the :code:`Client` methods to run "
"your code (i.e., to fit the logistic regression we defined earlier)."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:100
msgid ""
"Flower provides a convenience class called :code:`NumPyClient` which "
"makes it easier to implement the :code:`Client` interface when your "
"workload uses scikit-learn. Implementing :code:`NumPyClient` usually "
"means defining the following methods (:code:`set_parameters` is optional "
"though):"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:105
msgid ":code:`get_parameters`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:106
msgid "return the model weight as a list of NumPy ndarrays"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:108
msgid ":code:`set_parameters` (optional)"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:108
msgid ""
"update the local model weights with the parameters received from the "
"server"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:109
msgid "is directly imported with :code:`utils.set_model_params()`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:112
msgid ":code:`fit`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:111
msgid "set the local model weights"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:112
msgid "train the local model"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:113
msgid "receive the updated local model weights"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:115
msgid ":code:`evaluate`"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:115
msgid "test the local model"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:117
msgid "The methods can be implemented in the following way:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:140
msgid ""
"We can now create an instance of our class :code:`MnistClient` and add "
"one line to actually run this client:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:147
msgid ""
"That's it for the client. We only have to implement :code:`Client` or "
":code:`NumPyClient` and call :code:`fl.client.start_client()` or "
":code:`fl.client.start_numpy_client()`. The string "
":code:`\"0.0.0.0:8080\"` tells the client which server to connect to. In "
"our case we can run the server and the client on the same machine, "
"therefore we use :code:`\"0.0.0.0:8080\"`. If we run a truly federated "
"workload with the server and clients running on different machines, all "
"that needs to change is the :code:`server_address` we pass to the client."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:154
msgid "Flower Server"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:156
msgid ""
"The following Flower server is a little bit more advanced and returns an "
"evaluation function for the server-side evaluation. First, we import "
"again all required libraries such as Flower and scikit-learn."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:159
msgid ":code:`server.py`, import Flower and start the server:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:170
msgid ""
"The number of federated learning rounds is set in :code:`fit_round()` and"
" the evaluation is defined in :code:`get_evaluate_fn()`. The evaluation "
"function is called after each federated learning round and gives you "
"information about loss and accuracy."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:195
msgid ""
"The :code:`main` contains the server-side parameter initialization "
":code:`utils.set_initial_params()` as well as the aggregation strategy "
":code:`fl.server.strategy:FedAvg()`. The strategy is the default one, "
"federated averaging (or FedAvg), with two clients and evaluation after "
"each federated learning round. The server can be started with the command"
" :code:`fl.server.start_server(server_address=\"0.0.0.0:8080\", "
"strategy=strategy, config=fl.server.ServerConfig(num_rounds=3))`."
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:212
msgid "Train the model, federated!"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:214
msgid ""
"With both client and server ready, we can now run everything and see "
"federated learning in action. Federated learning systems usually have a "
"server and multiple clients. We, therefore, have to start the server "
"first:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:221
msgid ""
"Once the server is running we can start the clients in different "
"terminals. Open a new terminal and start the first client:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:228
msgid "Open another terminal and start the second client:"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:234
msgid ""
"Each client will have its own dataset. You should now see how the "
"training does in the very first terminal (the one that started the "
"server):"
msgstr ""

#: ../../source/quickstart-scikitlearn.rst:268
msgid ""
"Congratulations! You've successfully built and run your first federated "
"learning system. The full `source code "
"<https://github.com/adap/flower/tree/main/examples/sklearn-logreg-"
"mnist>`_ for this example can be found in :code:`examples/sklearn-logreg-"
"mnist`."
msgstr ""

