# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-09 15:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/quickstart-pytorch.rst:5
msgid "Quickstart PyTorch"
msgstr ""

#: ../../source/quickstart-pytorch.rst:10
msgid ""
"In this tutorial we will learn how to train a Convolutional Neural "
"Network on CIFAR10 using Flower and PyTorch."
msgstr ""

#: ../../source/quickstart-pytorch.rst:12
msgid ""
"First of all, it is recommended to create a virtual environment and run "
"everything within a `virtualenv <https://flower.dev/docs/recommended-env-"
"setup.html>`_."
msgstr ""

#: ../../source/quickstart-pytorch.rst:14
msgid ""
"Our example consists of one *server* and two *clients* all having the "
"same model."
msgstr ""

#: ../../source/quickstart-pytorch.rst:16
msgid ""
"*Clients* are responsible for generating individual weight-updates for "
"the model based on their local datasets. These updates are then sent to "
"the *server* which will aggregate them to produce a better model. "
"Finally, the *server* sends this improved version of the model back to "
"each *client*. A complete cycle of weight updates is called a *round*."
msgstr ""

#: ../../source/quickstart-pytorch.rst:20
msgid ""
"Now that we have a rough idea of what is going on, let's get started. We "
"first need to install Flower. You can do this by running :"
msgstr ""

#: ../../source/quickstart-pytorch.rst:26
msgid ""
"Since we want to use PyTorch to solve a computer vision task, let's go "
"ahead and install PyTorch and the **torchvision** library:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:34
msgid "Flower Client"
msgstr ""

#: ../../source/quickstart-pytorch.rst:36
msgid ""
"Now that we have all our dependencies installed, let's run a simple "
"distributed training with two clients and one server. Our training "
"procedure and network architecture are based on PyTorch's `Deep Learning "
"with PyTorch "
"<https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html>`_."
msgstr ""

#: ../../source/quickstart-pytorch.rst:38
msgid ""
"In a file called :code:`client.py`, import Flower and PyTorch related "
"packages:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:53
msgid "In addition, we define the device allocation in PyTorch with:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:59
msgid ""
"We use PyTorch to load CIFAR10, a popular colored image classification "
"dataset for machine learning. The PyTorch :code:`DataLoader()` downloads "
"the training and test data that are then normalized."
msgstr ""

#: ../../source/quickstart-pytorch.rst:75
msgid ""
"Define the loss and optimizer with PyTorch. The training of the dataset "
"is done by looping over the dataset, measure the corresponding loss and "
"optimize it."
msgstr ""

#: ../../source/quickstart-pytorch.rst:91
msgid ""
"Define then the validation of the  machine learning network. We loop over"
" the test set and measure the loss and accuracy of the test set."
msgstr ""

#: ../../source/quickstart-pytorch.rst:110
msgid ""
"After defining the training and testing of a PyTorch machine learning "
"model, we use the functions for the Flower clients."
msgstr ""

#: ../../source/quickstart-pytorch.rst:112
msgid ""
"The Flower clients will use a simple CNN adapted from 'PyTorch: A 60 "
"Minute Blitz':"
msgstr ""

#: ../../source/quickstart-pytorch.rst:139
msgid ""
"After loading the data set with :code:`load_data()` we define the Flower "
"interface."
msgstr ""

#: ../../source/quickstart-pytorch.rst:141
msgid ""
"The Flower server interacts with clients through an interface called "
":code:`Client`. When the server selects a particular client for training,"
" it sends training instructions over the network. The client receives "
"those instructions and calls one of the :code:`Client` methods to run "
"your code (i.e., to train the neural network we defined earlier)."
msgstr ""

#: ../../source/quickstart-pytorch.rst:147
msgid ""
"Flower provides a convenience class called :code:`NumPyClient` which "
"makes it easier to implement the :code:`Client` interface when your "
"workload uses PyTorch. Implementing :code:`NumPyClient` usually means "
"defining the following methods (:code:`set_parameters` is optional "
"though):"
msgstr ""

#: ../../source/quickstart-pytorch.rst:152
msgid ":code:`get_parameters`"
msgstr ""

#: ../../source/quickstart-pytorch.rst:153
msgid "return the model weight as a list of NumPy ndarrays"
msgstr ""

#: ../../source/quickstart-pytorch.rst:154
msgid ":code:`set_parameters` (optional)"
msgstr ""

#: ../../source/quickstart-pytorch.rst:155
msgid ""
"update the local model weights with the parameters received from the "
"server"
msgstr ""

#: ../../source/quickstart-pytorch.rst:158
msgid ":code:`fit`"
msgstr ""

#: ../../source/quickstart-pytorch.rst:157
msgid "set the local model weights"
msgstr ""

#: ../../source/quickstart-pytorch.rst:158
msgid "train the local model"
msgstr ""

#: ../../source/quickstart-pytorch.rst:159
msgid "receive the updated local model weights"
msgstr ""

#: ../../source/quickstart-pytorch.rst:161
msgid ":code:`evaluate`"
msgstr ""

#: ../../source/quickstart-pytorch.rst:161
msgid "test the local model"
msgstr ""

#: ../../source/quickstart-pytorch.rst:163
msgid "which can be implemented in the following way:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:186
msgid ""
"We can now create an instance of our class :code:`CifarClient` and add "
"one line to actually run this client:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:193
msgid ""
"That's it for the client. We only have to implement :code:`Client` or "
":code:`NumPyClient` and call :code:`fl.client.start_client()` or "
":code:`fl.client.start_numpy_client()`. The string :code:`\"[::]:8080\"` "
"tells the client which server to connect to. In our case we can run the "
"server and the client on the same machine, therefore we use "
":code:`\"[::]:8080\"`. If we run a truly federated workload with the "
"server and clients running on different machines, all that needs to "
"change is the :code:`server_address` we point the client at."
msgstr ""

#: ../../source/quickstart-pytorch.rst:200
msgid "Flower Server"
msgstr ""

#: ../../source/quickstart-pytorch.rst:202
msgid ""
"For simple workloads we can start a Flower server and leave all the "
"configuration possibilities at their default values. In a file named "
":code:`server.py`, import Flower and start the server:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:213
msgid "Train the model, federated!"
msgstr ""

#: ../../source/quickstart-pytorch.rst:215
msgid ""
"With both client and server ready, we can now run everything and see "
"federated learning in action. FL systems usually have a server and "
"multiple clients. We therefore have to start the server first:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:223
msgid ""
"Once the server is running we can start the clients in different "
"terminals. Open a new terminal and start the first client:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:230
msgid "Open another terminal and start the second client:"
msgstr ""

#: ../../source/quickstart-pytorch.rst:236
msgid ""
"Each client will have its own dataset. You should now see how the "
"training does in the very first terminal (the one that started the "
"server):"
msgstr ""

#: ../../source/quickstart-pytorch.rst:268
msgid ""
"Congratulations! You've successfully built and run your first federated "
"learning system. The full `source code "
"<https://github.com/adap/flower/blob/main/examples/quickstart-"
"pytorch/client.py>`_ for this example can be found in :code:`examples"
"/quickstart-pytorch`."
msgstr ""

