# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-09 15:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/quickstart-ios.rst:5
msgid "Quickstart iOS"
msgstr ""

#: ../../source/quickstart-ios.rst:7
msgid ""
"In this tutorial we will learn how to train a Neural Network on MNIST "
"using Flower and CoreML on iOS devices."
msgstr ""

#: ../../source/quickstart-ios.rst:9
msgid ""
"First of all, for running the Flower Python server, it is recommended to "
"create a virtual environment and run everything within a `virtualenv "
"<https://flower.dev/docs/recommended-env-setup.html>`_. For the Flower "
"client implementation in iOS, it is recommended to use Xcode as our IDE."
msgstr ""

#: ../../source/quickstart-ios.rst:12
msgid ""
"Our example consists of one Python *server* and two iPhone *clients* that"
" all have the same model."
msgstr ""

#: ../../source/quickstart-ios.rst:14
msgid ""
"*Clients* are responsible for generating individual weight updates for "
"the model based on their local datasets. These updates are then sent to "
"the *server* which will aggregate them to produce a better model. "
"Finally, the *server* sends this improved version of the model back to "
"each *client*. A complete cycle of weight updates is called a *round*."
msgstr ""

#: ../../source/quickstart-ios.rst:18
msgid ""
"Now that we have a rough idea of what is going on, let's get started to "
"setup our Flower server environment. We first need to install Flower. You"
" can do this by using pip:"
msgstr ""

#: ../../source/quickstart-ios.rst:24
msgid "Or Poetry:"
msgstr ""

#: ../../source/quickstart-ios.rst:31
msgid "Flower Client"
msgstr ""

#: ../../source/quickstart-ios.rst:33
msgid ""
"Now that we have all our dependencies installed, let's run a simple "
"distributed training using CoreML as our local training pipeline and "
"MNIST as our dataset. For simplicity reasons we will use the complete "
"Flower client with CoreML, that has been implemented and stored inside "
"the Swift SDK. The client implementation can be seen below:"
msgstr ""

#: ../../source/quickstart-ios.rst:69
msgid ""
"Let's create a new application project in Xcode and add :code:`flwr` as a"
" dependency in your project. For our application, we will store the logic"
" of our app in :code:`FLiOSModel.swift` and the UI elements in "
":code:`ContentView.swift`. We will focus more on :code:`FLiOSModel.swift`"
" in this quickstart. Please refer to the `full code example "
"<https://github.com/adap/flower/tree/main/examples/ios>`_ to learn more "
"about the app."
msgstr ""

#: ../../source/quickstart-ios.rst:72
msgid "Import Flower and CoreML related packages in :code:`FLiOSModel.swift`:"
msgstr ""

#: ../../source/quickstart-ios.rst:80
msgid ""
"Then add the mlmodel to the project simply by drag-and-drop, the mlmodel "
"will be bundled inside the application during deployment to your iOS "
"device. We need to pass the url to access mlmodel and run CoreML machine "
"learning processes, it can be retrieved by calling the function "
":code:`Bundle.main.url`. For the MNIST dataset, we need to preprocess it "
"into :code:`MLBatchProvider` object. The preprocessing is done inside "
":code:`DataLoader.swift`."
msgstr ""

#: ../../source/quickstart-ios.rst:96
msgid ""
"Since CoreML does not allow the model parameters to be seen before "
"training, and accessing the model parameters during or after the training"
" can only be done by specifying the layer name, we need to know this "
"informations beforehand, through looking at the model specification, "
"which are written as proto files. The implementation can be seen in "
":code:`MLModelInspect`."
msgstr ""

#: ../../source/quickstart-ios.rst:99
msgid ""
"After we have all of the necessary informations, let's create our Flower "
"client."
msgstr ""

#: ../../source/quickstart-ios.rst:114
msgid ""
"Then start the Flower gRPC client and start communicating to the server "
"by passing our Flower client to the function :code:`startFlwrGRPC`."
msgstr ""

#: ../../source/quickstart-ios.rst:121
msgid ""
"That's it for the client. We only have to implement :code:`Client` or "
"call the provided :code:`MLFlwrClient` and call :code:`startFlwrGRPC()`. "
"The attribute :code:`hostname` and :code:`port` tells the client which "
"server to connect to. This can be done by entering the hostname and port "
"in the application before clicking the start button to start the "
"federated learning process."
msgstr ""

#: ../../source/quickstart-ios.rst:126
msgid "Flower Server"
msgstr ""

#: ../../source/quickstart-ios.rst:128
msgid ""
"For simple workloads we can start a Flower server and leave all the "
"configuration possibilities at their default values. In a file named "
":code:`server.py`, import Flower and start the server:"
msgstr ""

#: ../../source/quickstart-ios.rst:139
msgid "Train the model, federated!"
msgstr ""

#: ../../source/quickstart-ios.rst:141
msgid ""
"With both client and server ready, we can now run everything and see "
"federated learning in action. FL systems usually have a server and "
"multiple clients. We therefore have to start the server first:"
msgstr ""

#: ../../source/quickstart-ios.rst:149
msgid ""
"Once the server is running we can start the clients in different "
"terminals. Build and run the client through your Xcode, one through Xcode"
" Simulator and the other by deploying it to your iPhone. To see more "
"about how to deploy your app to iPhone or Simulator visit `here "
"<https://developer.apple.com/documentation/xcode/running-your-app-in-"
"simulator-or-on-a-device>`_."
msgstr ""

#: ../../source/quickstart-ios.rst:153
msgid ""
"Congratulations! You've successfully built and run your first federated "
"learning system in your ios device. The full `source code "
"<https://github.com/adap/flower/blob/main/examples/ios>`_ for this "
"example can be found in :code:`examples/ios`."
msgstr ""

