# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Adap GmbH
# This file is distributed under the same license as the Flower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flower \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-09 15:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/release-process.rst:2
msgid "Release Process"
msgstr ""

#: ../../source/release-process.rst:4
msgid ""
"This document describes the current release process. It may or may not "
"change in the future."
msgstr ""

#: ../../source/release-process.rst:7
msgid "Before the release"
msgstr ""

#: ../../source/release-process.rst:9
msgid ""
"Update the changelog (``changelog.md``) with all relevant changes that "
"happened after the last release. If the last release was tagged "
"``v1.2.0``, you can use the following URL to see all commits that got "
"merged into ``main`` since then:"
msgstr ""

#: ../../source/release-process.rst:11
msgid ""
"`GitHub: Compare v1.2.0...main "
"<https://github.com/adap/flower/compare/v1.2.0...main>`_"
msgstr ""

#: ../../source/release-process.rst:13
msgid ""
"Thank the authors who contributed since the last release. This command "
"helps extract them: ``git log --format='%aN' v1.1.0..HEAD | sort -u``. "
"The command has the same order as ``git shortlog``."
msgstr ""

#: ../../source/release-process.rst:17
msgid "During the release"
msgstr ""

#: ../../source/release-process.rst:19
msgid ""
"The version number of a release is stated in ``pyproject.toml``. To "
"release a new version of Flower, the following things need to happen (in "
"that order):"
msgstr ""

#: ../../source/release-process.rst:21
msgid ""
"Update the ``changelog.md`` section header ``Unreleased`` to contain the "
"version number and date for the release you are building. Create a pull "
"request with the change."
msgstr ""

#: ../../source/release-process.rst:22
msgid ""
"Tag the release commit with the version number as soon as the PR is "
"merged: ``git tag v0.12.3``, then ``git push --tags``"
msgstr ""

#: ../../source/release-process.rst:23
msgid ""
"Build the release with ``./dev/build.sh``, then publish it with "
"``./dev/publish.sh``"
msgstr ""

#: ../../source/release-process.rst:24
msgid ""
"Create an entry in GitHub releases with the release notes for the "
"previously tagged commit and attach the build artifacts (:code:`.whl` and"
" :code:`.tar.gz`)."
msgstr ""

#: ../../source/release-process.rst:27
msgid "After the release"
msgstr ""

#: ../../source/release-process.rst:29
msgid "Create a pull request which contains the following changes:"
msgstr ""

#: ../../source/release-process.rst:31
msgid "Increase the minor version in ``pyproject.toml`` by one."
msgstr ""

#: ../../source/release-process.rst:32
msgid "Update all files which contain the current version number if necessary."
msgstr ""

#: ../../source/release-process.rst:33
msgid "Add a new ``Unreleased`` section in ``changelog.md``."
msgstr ""

#: ../../source/release-process.rst:35
msgid ""
"Merge the pull request on the same day (i.e., before a new nighly release"
" gets published to PyPI)."
msgstr ""

#: ../../source/release-process.rst:38
msgid "Publishing a pre-release"
msgstr ""

#: ../../source/release-process.rst:41
msgid "Pre-release naming"
msgstr ""

#: ../../source/release-process.rst:43
msgid ""
"PyPI supports pre-releases (alpha, beta, release candiate). Pre-releases "
"MUST use one of the following naming patterns:"
msgstr ""

#: ../../source/release-process.rst:45
msgid "Alpha: ``MAJOR.MINOR.PATCHaN``"
msgstr ""

#: ../../source/release-process.rst:46
msgid "Beta: ``MAJOR.MINOR.PATCHbN``"
msgstr ""

#: ../../source/release-process.rst:47
msgid "Release candiate (RC): ``MAJOR.MINOR.PATCHrcN``"
msgstr ""

#: ../../source/release-process.rst:49
msgid "Examples include:"
msgstr ""

#: ../../source/release-process.rst:51
msgid "``1.0.0a0``"
msgstr ""

#: ../../source/release-process.rst:52
msgid "``1.0.0b0``"
msgstr ""

#: ../../source/release-process.rst:53
msgid "``1.0.0rc0``"
msgstr ""

#: ../../source/release-process.rst:54
msgid "``1.0.0rc1``"
msgstr ""

#: ../../source/release-process.rst:56
msgid ""
"This is in line with PEP-440 and the recommendations from the Python "
"Packaging Authority (PyPA):"
msgstr ""

#: ../../source/release-process.rst:59
msgid "`PEP-440 <https://peps.python.org/pep-0440/>`_"
msgstr ""

#: ../../source/release-process.rst:60
msgid ""
"`PyPA Choosing a versioning scheme "
"<https://packaging.python.org/en/latest/guides/distributing-packages-"
"using-setuptools/#choosing-a-versioning-scheme>`_"
msgstr ""

#: ../../source/release-process.rst:62
msgid ""
"Note that the approach defined by PyPA is not compatible with SemVer "
"2.0.0 spec, for details consult the `Semantic Versioning Specification "
"<https://semver.org/spec/v2.0.0.html#spec-item-11>`_ (specifically item "
"11 on precedence)."
msgstr ""

#: ../../source/release-process.rst:65
msgid "Pre-release classification"
msgstr ""

#: ../../source/release-process.rst:67
msgid "Should the next pre-release be called alpha, beta, or release candidate?"
msgstr ""

#: ../../source/release-process.rst:69
msgid ""
"RC: feature complete, no known issues (apart from issues that are "
"classified as \"won't fix\" for the next stable release) - if no issues "
"surface this will become the next stable release"
msgstr ""

#: ../../source/release-process.rst:70
msgid "Beta: feature complete, allowed to have known issues"
msgstr ""

#: ../../source/release-process.rst:71
msgid "Alpha: not feature complete, allowed to have known issues"
msgstr ""

