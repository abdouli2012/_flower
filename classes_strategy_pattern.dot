digraph "classes" {
rankdir=BT
charset="utf-8"
//"flwr.client.client.Client" [color="black", fontcolor="black", label="{Client|\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\lget_properties(ins: PropertiesIns): PropertiesRes\l}", shape="record", style="solid"];
//"flwr.server.client_manager.ClientManager" [color="black", fontcolor="black", label="{ClientManager|\l|all(): Dict[str, ClientProxy]\lnum_available(): int\lregister(client: ClientProxy): bool\lsample(num_clients: int, min_num_clients: Optional[int], criterion: Optional[Criterion]): List[ClientProxy]\lunregister(client: ClientProxy): \lwait_for(num_clients: int, timeout: int): bool\l}", shape="record", style="solid"];
//"flwr.server.client_proxy.ClientProxy" [color="black", fontcolor="black", label="{ClientProxy|cid : str\lproperties : Dict\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\lget_properties(ins: PropertiesIns): PropertiesRes\lreconnect(reconnect: Reconnect): Disconnect\l}", shape="record", style="solid"];
//"flwr.common.typing.Code" [color="black", fontcolor="black", label="{Code|name\l|}", shape="record", style="solid"];
//"flwr.server.criterion.Criterion" [color="black", fontcolor="black", label="{Criterion|\l|select(client: ClientProxy): bool\l}", shape="record", style="solid"];
//"flwr.common.logger.CustomHTTPHandler" [color="black", fontcolor="black", label="{CustomHTTPHandler|identifier : str\l|mapLogRecord(record: LogRecord): Dict[str, Any]\l}", shape="record", style="solid"];
//"flwr.common.typing.Disconnect" [color="black", fontcolor="black", label="{Disconnect|reason : str\l|}", shape="record", style="solid"];
//"flwr.common.typing.EvaluateIns" [color="black", fontcolor="black", label="{EvaluateIns|config : Dict[str, Scalar]\lparameters\l|}", shape="record", style="solid"];
//"flwr.common.typing.EvaluateRes" [color="black", fontcolor="black", label="{EvaluateRes|loss : float\lmetrics : Dict[str, Scalar]\lnum_examples : int\l|}", shape="record", style="solid"];
//"flwr.server.server_test.FailingClient" [color="black", fontcolor="black", label="{FailingClient|\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\lget_properties(ins: PropertiesIns): PropertiesRes\lreconnect(reconnect: Reconnect): Disconnect\l}", shape="record", style="solid"];
"flwr.server.strategy.fast_and_slow.FastAndSlow" [color="black", fontcolor="black", label="{FastAndSlow|alternating_timeout : bool\lcontributions : Dict[str, List[Tuple[int, int, int]]]\ldurations : list, List[Tuple[str, float, int, int]]\ldynamic_timeout : bool\ldynamic_timeout_percentile : float\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\limportance_sampling : bool\lmin_completion_rate_evaluate : float\lmin_completion_rate_fit : float\lr_fast : int\lr_slow : int\lt_fast : int\lt_slow : int\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\l}", shape="record", style="solid"];
//"flwr.server.strategy.fast_and_slow_test.FastAndSlowTestCase" [color="black", fontcolor="black", label="{FastAndSlowTestCase|\l|test_fast_round(): \ltest_next_timeout_below_max(): \l}", shape="record", style="solid"];
"flwr.server.strategy.fault_tolerant_fedavg.FaultTolerantFedAvg" [color="black", fontcolor="black", label="{FaultTolerantFedAvg|completion_rate_evaluate : float\lcompletion_rate_fit : float\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedadagrad.FedAdagrad" [color="black", fontcolor="black", label="{FedAdagrad|current_weights\lm_t\lv_t\l|aggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedadam.FedAdam" [color="black", fontcolor="black", label="{FedAdam|current_weights\lm_t\lv_t\l|aggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedavg.FedAvg" [color="black", fontcolor="black", label="{FedAvg|accept_failures : bool\leval_fn : Optional[Callable[[Weights], Optional[Tuple[float, Dict[str, Scalar]]]]]\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfraction_eval : float\lfraction_fit : float\linitial_parameters : Optional[Parameters], NoneType\lmin_available_clients : int\lmin_eval_clients : int\lmin_fit_clients : int\lon_evaluate_config_fn : Optional[Callable[[int], Dict[str, Scalar]]]\lon_fit_config_fn : Optional[Callable[[int], Dict[str, Scalar]]]\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_evaluate(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, EvaluateIns]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\levaluate(parameters: Parameters): Optional[Tuple[float, Dict[str, Scalar]]]\linitialize_parameters(client_manager: ClientManager): Optional[Parameters]\lnum_evaluation_clients(num_available_clients: int): Tuple[int, int]\lnum_fit_clients(num_available_clients: int): Tuple[int, int]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedavg_android.FedAvgAndroid" [color="black", fontcolor="black", label="{FedAvgAndroid|accept_failures : bool\leval_fn : Optional[Callable[[Weights], Optional[Tuple[float, Dict[str, Scalar]]]]]\lfraction_eval : float\lfraction_fit : float\linitial_parameters : Optional[Parameters], NoneType\lmin_available_clients : int\lmin_eval_clients : int\lmin_fit_clients : int\lon_evaluate_config_fn : Optional[Callable[[int], Dict[str, Scalar]]]\lon_fit_config_fn : Optional[Callable[[int], Dict[str, Scalar]]]\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lbytes_to_ndarray(tensor: bytes): \lconfigure_evaluate(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, EvaluateIns]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\levaluate(parameters: Parameters): Optional[Tuple[float, Dict[str, Scalar]]]\linitialize_parameters(client_manager: ClientManager): Optional[Parameters]\lndarray_to_bytes(ndarray): bytes\lnum_evaluation_clients(num_available_clients: int): Tuple[int, int]\lnum_fit_clients(num_available_clients: int): Tuple[int, int]\lparameters_to_weights(parameters: Parameters): Weights\lweights_to_parameters(weights: Weights): Parameters\l}", shape="record", style="solid"];
"flwr.server.strategy.fedavgm.FedAvgM" [color="black", fontcolor="black", label="{FedAvgM|evaluate_metrics_aggregation_fn : NoneType\lfit_metrics_aggregation_fn : NoneType\linitial_parameters\lmomentum_vector : Optional[Weights]\lserver_learning_rate : float\lserver_momentum : float\lserver_opt : bool\l|aggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\linitialize_parameters(client_manager: ClientManager): Optional[Parameters]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedfs_v0.FedFSv0" [color="black", fontcolor="black", label="{FedFSv0|contributions : Dict[str, List[Tuple[int, int, int]]]\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lmin_completion_rate_evaluate : float\lmin_completion_rate_fit : float\lr_fast : int\lr_slow : int\lt_fast : int\lt_slow : int\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedfs_v1.FedFSv1" [color="black", fontcolor="black", label="{FedFSv1|contributions : Dict[str, List[Tuple[int, int, int]]]\ldurations : List[Tuple[str, float, int, int]], list\ldynamic_timeout_percentile : float\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lmin_completion_rate_evaluate : float\lmin_completion_rate_fit : float\lr_fast : int\lr_slow : int\lt_max : int\luse_past_contributions : bool\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedopt.FedOpt" [color="black", fontcolor="black", label="{FedOpt|beta_1 : float\lbeta_2 : float\lcurrent_weights\leta : float\leta_l : float\lm_t : Optional[Weights]\ltau : float\lv_t : Optional[Weights]\l|}", shape="record", style="solid"];
"flwr.server.strategy.fedyogi.FedYogi" [color="black", fontcolor="black", label="{FedYogi|current_weights\lm_t\lv_t\l|aggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\l}", shape="record", style="solid"];
//"flwr.common.typing.FitIns" [color="black", fontcolor="black", label="{FitIns|config : Dict[str, Scalar]\lparameters\l|}", shape="record", style="solid"];
//"flwr.common.typing.FitRes" [color="black", fontcolor="black", label="{FitRes|metrics : Dict[str, Scalar]\lnum_examples : int\lparameters\l|}", shape="record", style="solid"];
//"flwr.client.grpc_client.message_handler_test.FlowerClientWithProps" [color="black", fontcolor="black", label="{FlowerClientWithProps|\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\lget_properties(ins: PropertiesIns): PropertiesRes\l}", shape="record", style="solid"];
//"flwr.client.grpc_client.message_handler_test.FlowerClientWithoutProps" [color="black", fontcolor="black", label="{FlowerClientWithoutProps|\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\l}", shape="record", style="solid"];
//"flwr.proto.transport_pb2_grpc.FlowerService" [color="black", fontcolor="black", label="{FlowerService|\l|Join(request_iterator, target, options, channel_credentials, call_credentials, insecure, compression, wait_for_ready, timeout, metadata)\l}", shape="record", style="solid"];
//"flwr.server.grpc_server.flower_service_servicer.FlowerServiceServicer" [color="black", fontcolor="black", label="{FlowerServiceServicer|client_factory : Callable[[str, GRPCBridge], GrpcClientProxy]\lclient_manager\lgrpc_bridge_factory : Callable[[], GRPCBridge]\l|Join(request_iterator: Iterator[ClientMessage], context): Iterator[ServerMessage]\l}", shape="record", style="solid"];
//"flwr.proto.transport_pb2_grpc.FlowerServiceServicer" [color="black", fontcolor="black", label="{FlowerServiceServicer|\l|Join(request_iterator, context)\l}", shape="record", style="solid"];
//"flwr.server.grpc_server.flower_service_servicer_test.FlowerServiceServicerTestCase" [color="black", fontcolor="black", label="{FlowerServiceServicerTestCase|client_factory_mock : MagicMock\lclient_manager_mock : MagicMock\lclient_messages\lclient_messages_iterator\lcontext_mock : MagicMock\lgrpc_bridge_factory_mock : MagicMock\lgrpc_bridge_mock : MagicMock\lgrpc_client_proxy_mock : MagicMock\lserver_messages\lserver_messages_iterator\l|setUp(): \ltest_join(): \ltest_register_client(): \l}", shape="record", style="solid"];
//"flwr.proto.transport_pb2_grpc.FlowerServiceStub" [color="black", fontcolor="black", label="{FlowerServiceStub|Join\l|}", shape="record", style="solid"];
//"flwr.server.grpc_server.grpc_bridge.GRPCBridge" [color="black", fontcolor="black", label="{GRPCBridge|\l|close(): \lrequest(server_message: ServerMessage): ClientMessage\lserver_message_iterator(): Iterator[ServerMessage]\lset_client_message(client_message: ClientMessage): \l}", shape="record", style="solid"];
//"flwr.server.grpc_server.grpc_bridge.GRPCBridgeClosed" [color="black", fontcolor="red", label="{GRPCBridgeClosed|\l|}", shape="record", style="solid"];
//"flwr.server.grpc_server.grpc_client_proxy.GrpcClientProxy" [color="black", fontcolor="black", label="{GrpcClientProxy|bridge\l|evaluate(ins): \lfit(ins): \lget_parameters(): \lget_properties(ins): \lreconnect(reconnect): \l}", shape="record", style="solid"];
//"flwr.server.grpc_server.grpc_client_proxy_test.GrpcClientProxyTestCase" [color="black", fontcolor="black", label="{GrpcClientProxyTestCase|bridge_mock : MagicMock\lbridge_mock_get_proprieties : MagicMock\l|setUp(): \ltest_evaluate(): \ltest_fit(): \ltest_get_parameters(): \ltest_get_properties(): \l}", shape="record", style="solid"];
//"flwr.server.history.History" [color="black", fontcolor="black", label="{History|losses_centralized : List[Tuple[int, float]]\llosses_distributed : List[Tuple[int, float]]\lmetrics_centralized : Dict[str, List[Tuple[int, Scalar]]]\lmetrics_distributed : Dict[str, List[Tuple[int, Scalar]]]\l|add_loss_centralized(rnd: int, loss: float): \ladd_loss_distributed(rnd: int, loss: float): \ladd_metrics_centralized(rnd: int, metrics: Dict[str, Scalar]): \ladd_metrics_distributed(rnd: int, metrics: Dict[str, Scalar]): \l}", shape="record", style="solid"];
//"flwr.dataset.utils.common_test.ImageClassificationPartitionedTestCase" [color="black", fontcolor="black", label="{ImageClassificationPartitionedTestCase|ds : tuple\lnum_classes : int\lnum_samples : int\lnum_samples_per_class : int\l|setUp(): \ltest_assert_identity(): \ltest_combine_partitions(): \ltest_create_lda_partitions_alpha_near_zero(): \ltest_create_lda_partitions_elements(): \ltest_create_lda_partitions_elements_list_concentration(): \ltest_create_lda_partitions_elements_wrong_list_concentration(): \ltest_create_lda_partitions_imbalanced(): \ltest_create_lda_partitions_imbalanced_not_set(): \ltest_create_lda_partitions_large_alpha(): \ltest_create_lda_partitions_with_inf_alpha(): \ltest_exclude_classes_and_normalize(): \ltest_exclude_classes_and_normalize_positive_eps(): \ltest_exclude_classes_and_normalize_verify_dist_positive(): \ltest_exclude_classes_and_normalize_verify_dist_sum_one(): \ltest_exclude_classes_and_normalize_verify_distribution_and_exclude_dims(): \ltest_get_partitions_distributions(): \ltest_partition(): \ltest_sample_without_replacement(): \ltest_sample_without_replacement_large_sample(): \ltest_sample_without_replacement_updating_empty_list(): \ltest_shuffle(): \ltest_sort_by_label(): \ltest_sort_by_label_repeating(): \ltest_split_array(): \ltest_split_array_at_indices_not_increasing(): \ltest_split_array_at_indices_wrong_dtype(): \ltest_split_array_at_indices_wrong_initial_split(): \ltest_split_array_at_indices_wrong_num_dims(): \ltest_split_array_at_indices_wrong_split_max_index(): \ltest_split_at_fraction(): \l}", shape="record", style="solid"];
//"flwr.client.client_test.NotOverridingClient" [color="black", fontcolor="black", label="{NotOverridingClient|\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\l}", shape="record", style="solid"];
//"flwr.client.numpy_client_test.NotOverridingClient" [color="black", fontcolor="black", label="{NotOverridingClient|\l|evaluate(parameters: List[np.ndarray], config: Dict[str, Scalar]): Tuple[float, int, Dict[str, Scalar]]\lfit(parameters: List[np.ndarray], config: Dict[str, Scalar]): Tuple[List[np.ndarray], int, Dict[str, Scalar]]\lget_parameters(): List[np.ndarray]\l}", shape="record", style="solid"];
//"flwr.client.numpy_client.NumPyClient" [color="black", fontcolor="black", label="{NumPyClient|\l|evaluate(parameters: List[np.ndarray], config: Dict[str, Scalar]): Tuple[float, int, Dict[str, Scalar]]\lfit(parameters: List[np.ndarray], config: Dict[str, Scalar]): Tuple[List[np.ndarray], int, Dict[str, Scalar]]\lget_parameters(): List[np.ndarray]\lget_properties(config: Config): Dict[str, Scalar]\l}", shape="record", style="solid"];
//"flwr.client.numpy_client.NumPyClientWrapper" [color="black", fontcolor="black", label="{NumPyClientWrapper|numpy_client\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\lget_properties(ins: PropertiesIns): PropertiesRes\l}", shape="record", style="solid"];
//"flwr.client.client_test.OverridingClient" [color="black", fontcolor="black", label="{OverridingClient|\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\lget_properties(ins: PropertiesIns): PropertiesRes\l}", shape="record", style="solid"];
//"flwr.client.numpy_client_test.OverridingClient" [color="black", fontcolor="black", label="{OverridingClient|\l|evaluate(parameters: List[np.ndarray], config: Dict[str, Scalar]): Tuple[float, int, Dict[str, Scalar]]\lfit(parameters: List[np.ndarray], config: Dict[str, Scalar]): Tuple[List[np.ndarray], int, Dict[str, Scalar]]\lget_parameters(): List[np.ndarray]\lget_properties(config: Config): Properties\l}", shape="record", style="solid"];
//"flwr.common.typing.Parameters" [color="black", fontcolor="black", label="{Parameters|tensor_type : str\ltensors : List[bytes]\l|}", shape="record", style="solid"];
//"flwr.common.typing.ParametersRes" [color="black", fontcolor="black", label="{ParametersRes|parameters\l|}", shape="record", style="solid"];
//"flwr.common.typing.PropertiesIns" [color="black", fontcolor="black", label="{PropertiesIns|config : Dict\l|}", shape="record", style="solid"];
//"flwr.common.typing.PropertiesRes" [color="black", fontcolor="black", label="{PropertiesRes|properties : Dict\lstatus\l|}", shape="record", style="solid"];
"flwr.server.strategy.qfedavg.QFedAvg" [color="black", fontcolor="black", label="{QFedAvg|accept_failures : bool\leval_fn : Optional[Callable[[Weights], Optional[Tuple[float, Dict[str, Scalar]]]]]\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfraction_eval : float\lfraction_fit : float\llearning_rate : float\lmin_available_clients : int\lmin_eval_clients : int\lmin_fit_clients : int\lon_evaluate_config_fn : Optional[Callable[[int], Dict[str, Scalar]]]\lon_fit_config_fn : Optional[Callable[[int], Dict[str, Scalar]]]\lpre_weights : Optional[Weights]\lq_param : float\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_evaluate(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, EvaluateIns]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\lnum_evaluation_clients(num_available_clients: int): Tuple[int, int]\lnum_fit_clients(num_available_clients: int): Tuple[int, int]\l}", shape="record", style="solid"];
//"flwr.simulation.ray_transport.ray_client_proxy.RayClientProxy" [color="black", fontcolor="black", label="{RayClientProxy|client_fn : Callable\lresources : Dict[str, int]\l|evaluate(ins): \lfit(ins): \lget_parameters(): \lget_properties(ins): \lreconnect(reconnect): \l}", shape="record", style="solid"];
//"flwr.common.typing.Reconnect" [color="black", fontcolor="black", label="{Reconnect|seconds : Optional[int]\l|}", shape="record", style="solid"];
"flwr.server.server.Server" [color="black", fontcolor="black", label="{Server|max_workers : Optional[int]\lparameters : NoneType\lstrategy : Optional[Strategy]\l|client_manager(): ClientManager\ldisconnect_all_clients(): \levaluate_round(rnd: int): Optional[Tuple[Optional[float], Dict[str, Scalar], EvaluateResultsAndFailures]]\lfit(num_rounds: int): History\lfit_round(rnd: int): Optional[Tuple[Optional[Parameters], Dict[str, Scalar], FitResultsAndFailures]]\lset_max_workers(max_workers: Optional[int]): \lset_strategy(strategy: Strategy): \l}", shape="record", style="solid"];
//"flwr.server.client_manager.SimpleClientManager" [color="black", fontcolor="black", label="{SimpleClientManager|clients : Dict[str, ClientProxy]\l|all(): Dict[str, ClientProxy]\lnum_available(): int\lregister(client: ClientProxy): bool\lsample(num_clients: int, min_num_clients: Optional[int], criterion: Optional[Criterion]): List[ClientProxy]\lunregister(client: ClientProxy): \lwait_for(num_clients: int, timeout: int): bool\l}", shape="record", style="solid"];
//"flwr.server.grpc_server.grpc_bridge.Status" [color="black", fontcolor="black", label="{Status|name\l|}", shape="record", style="solid"];
//"flwr.common.typing.Status" [color="black", fontcolor="black", label="{Status|code\lmessage : str\l|}", shape="record", style="solid"];
"flwr.server.strategy.strategy.Strategy" [color="black", fontcolor="black", label="{Strategy|\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_evaluate(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, EvaluateIns]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\levaluate(parameters: Parameters): Optional[Tuple[float, Dict[str, Scalar]]]\linitialize_parameters(client_manager: ClientManager): Optional[Parameters]\l}", shape="record", style="solid"];
//"flwr.server.server_test.SuccessClient" [color="black", fontcolor="black", label="{SuccessClient|\l|evaluate(ins: EvaluateIns): EvaluateRes\lfit(ins: FitIns): FitRes\lget_parameters(): ParametersRes\lget_properties(ins: PropertiesIns): PropertiesRes\lreconnect(reconnect: Reconnect): Disconnect\l}", shape="record", style="solid"];
//"flwr.server.utils.tensorboard.tensorboard.decorator.TBWrapper" [color="black", fontcolor="black", label="{TBWrapper|\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\l}", shape="record", style="solid"];
//"flwr.server.criterion_test.test_criterion_applied.TestCriterion" [color="black", fontcolor="black", label="{TestCriterion|\l|select(client: ClientProxy): bool\l}", shape="record", style="solid"];
//"flwr.client.grpc_client.message_handler.UnknownServerMessage" [color="black", fontcolor="red", label="{UnknownServerMessage|\l|}", shape="record", style="solid"];
//"flwr.client.client_test.NotOverridingClient" -> "flwr.client.client.Client" [arrowhead="empty", arrowtail="none"];
//"flwr.client.client_test.OverridingClient" -> "flwr.client.client.Client" [arrowhead="empty", arrowtail="none"];
//"flwr.client.grpc_client.message_handler_test.FlowerClientWithProps" -> "flwr.client.client.Client" [arrowhead="empty", arrowtail="none"];
//"flwr.client.grpc_client.message_handler_test.FlowerClientWithoutProps" -> "flwr.client.client.Client" [arrowhead="empty", arrowtail="none"];
//"flwr.client.numpy_client.NumPyClientWrapper" -> "flwr.client.client.Client" [arrowhead="empty", arrowtail="none"];
//"flwr.client.numpy_client_test.NotOverridingClient" -> "flwr.client.numpy_client.NumPyClient" [arrowhead="empty", arrowtail="none"];
//"flwr.client.numpy_client_test.OverridingClient" -> "flwr.client.numpy_client.NumPyClient" [arrowhead="empty", arrowtail="none"];
//"flwr.server.client_manager.SimpleClientManager" -> "flwr.server.client_manager.ClientManager" [arrowhead="empty", arrowtail="none"];
//"flwr.server.criterion_test.test_criterion_applied.TestCriterion" -> "flwr.server.criterion.Criterion" [arrowhead="empty", arrowtail="none"];
//"flwr.server.grpc_server.flower_service_servicer.FlowerServiceServicer" -> "flwr.proto.transport_pb2_grpc.FlowerServiceServicer" [arrowhead="empty", arrowtail="none"];
//"flwr.server.grpc_server.grpc_client_proxy.GrpcClientProxy" -> "flwr.server.client_proxy.ClientProxy" [arrowhead="empty", arrowtail="none"];
//"flwr.server.server_test.FailingClient" -> "flwr.server.client_proxy.ClientProxy" [arrowhead="empty", arrowtail="none"];
//"flwr.server.server_test.SuccessClient" -> "flwr.server.client_proxy.ClientProxy" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fast_and_slow.FastAndSlow" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fault_tolerant_fedavg.FaultTolerantFedAvg" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedadagrad.FedAdagrad" -> "flwr.server.strategy.fedopt.FedOpt" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedadam.FedAdam" -> "flwr.server.strategy.fedopt.FedOpt" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedavg.FedAvg" -> "flwr.server.strategy.strategy.Strategy" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedavg_android.FedAvgAndroid" -> "flwr.server.strategy.strategy.Strategy" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedavgm.FedAvgM" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedfs_v0.FedFSv0" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedfs_v1.FedFSv1" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedopt.FedOpt" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedyogi.FedYogi" -> "flwr.server.strategy.fedopt.FedOpt" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.qfedavg.QFedAvg" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.simulation.ray_transport.ray_client_proxy.RayClientProxy" -> "flwr.server.client_proxy.ClientProxy" [arrowhead="empty", arrowtail="none"];
"flwr.client.numpy_client.NumPyClient" -> "flwr.client.numpy_client.NumPyClientWrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="numpy_client", style="solid"];
//"flwr.common.typing.Code" -> "flwr.common.typing.Status" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="code", style="solid"];
//"flwr.common.typing.Parameters" -> "flwr.common.typing.EvaluateIns" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
//"flwr.common.typing.Parameters" -> "flwr.common.typing.FitIns" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
//"flwr.common.typing.Parameters" -> "flwr.common.typing.FitRes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
//"flwr.common.typing.Parameters" -> "flwr.common.typing.ParametersRes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
//"flwr.common.typing.Parameters" -> "flwr.server.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"flwr.common.typing.Parameters" -> "flwr.server.strategy.fedavgm.FedAvgM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="initial_parameters", style="solid"];
//"flwr.common.typing.Status" -> "flwr.common.typing.PropertiesRes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
//"flwr.server.client_manager.ClientManager" -> "flwr.server.grpc_server.flower_service_servicer.FlowerServiceServicer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_manager", style="solid"];
//"flwr.server.client_manager.ClientManager" -> "flwr.server.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_client_manager", style="solid"];
//"flwr.server.grpc_server.grpc_bridge.GRPCBridge" -> "flwr.server.grpc_server.grpc_client_proxy.GrpcClientProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bridge", style="solid"];
"flwr.server.strategy.strategy.Strategy" -> "flwr.server.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="strategy", style="solid"];
//"flwr.server.server.Server" -> "flwr.server.history.History" [arrowhead="vee"]
//"flwr.server.client_manager.SimpleClientManager" -> "flwr.server.criterion.Criterion" [arrowhead="vee"]
//"flwr.server.client_proxy.ClientProxy" -> "flwr.server.client_manager.SimpleClientManager" [arrowhead="diamond"]
}
