digraph "classes" {
rankdir=BT
charset="utf-8"
//"flwr.server.client_manager.ClientManager" [color="black", fontcolor="black", label="{ClientManager|clients: List[ClientProxy]\l_client_manager: ClientManager\l|all()\lnum_available()\lregister()\lsample()\lunregister()\lwait_for()\l}", shape="record", style="solid"];
//"flwr.server.client_proxy.ClientProxy" [color="black", fontcolor="black", label="{ClientProxy|cid : str\lproperties : Dict\l|evaluate()\lfit()\lget_parameters()\lget_properties()\lreconnect()\l}", shape="record", style="solid"];
//"flwr.server.strategy.fast_and_slow.FastAndSlow" [color="black", fontcolor="black", label="{FastAndSlow|alternating_timeout : bool\lcontributions : Dict[str, List[Tuple[int, int, int]]]\ldurations : list, List[Tuple[str, float, int, int]]\ldynamic_timeout : bool\ldynamic_timeout_percentile : float\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\limportance_sampling : bool\lmin_completion_rate_evaluate : float\lmin_completion_rate_fit : float\lr_fast : int\lr_slow : int\lt_fast : int\lt_slow : int\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fast_and_slow.FastAndSlow" [color="black", fontcolor="black", label="FastAndSlow", shape="record"];
//"flwr.server.strategy.fault_tolerant_fedavg.FaultTolerantFedAvg" [color="black", fontcolor="black", label="{FaultTolerantFedAvg|completion_rate_evaluate : float\lcompletion_rate_fit : float\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedadagrad.FedAdagrad" [color="black", fontcolor="black", label="{FedAdagrad}", shape="record", style="solid"];
"flwr.server.strategy.fedadam.FedAdam" [color="black", fontcolor="black", label="{FedAdam}", shape="record", style="solid"];
"flwr.server.strategy.fedavg.FedAvg" [color="black", fontcolor="black", label="FedAvg", shape="record", style="solid"];
"flwr.server.strategy.fedavg_android.FedAvgAndroid" [color="black", fontcolor="black", label="FedAvgAndroid", shape="record", style="solid"];
//"flwr.server.strategy.fedavgm.FedAvgM" [color="black", fontcolor="black", label="{FedAvgM|evaluate_metrics_aggregation_fn : NoneType\lfit_metrics_aggregation_fn : NoneType\linitial_parameters\lmomentum_vector : Optional[Weights]\lserver_learning_rate : float\lserver_momentum : float\lserver_opt : bool\l|aggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\linitialize_parameters(client_manager: ClientManager): Optional[Parameters]\l}", shape="record", style="solid"];
//"flwr.server.strategy.fedfs_v0.FedFSv0" [color="black", fontcolor="black", label="{FedFSv0|contributions : Dict[str, List[Tuple[int, int, int]]]\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lmin_completion_rate_evaluate : float\lmin_completion_rate_fit : float\lr_fast : int\lr_slow : int\lt_fast : int\lt_slow : int\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\l}", shape="record", style="solid"];
//"flwr.server.strategy.fedfs_v1.FedFSv1" [color="black", fontcolor="black", label="{FedFSv1|contributions : Dict[str, List[Tuple[int, int, int]]]\ldurations : List[Tuple[str, float, int, int]], list\ldynamic_timeout_percentile : float\levaluate_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lfit_metrics_aggregation_fn : Optional[MetricsAggregationFn]\lmin_completion_rate_evaluate : float\lmin_completion_rate_fit : float\lr_fast : int\lr_slow : int\lt_max : int\luse_past_contributions : bool\l|aggregate_evaluate(rnd: int, results: List[Tuple[ClientProxy, EvaluateRes]], failures: List[BaseException]): Tuple[Optional[float], Dict[str, Scalar]]\laggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\lconfigure_fit(rnd: int, parameters: Parameters, client_manager: ClientManager): List[Tuple[ClientProxy, FitIns]]\l}", shape="record", style="solid"];
"flwr.server.strategy.fedopt.FedOpt" [color="black", fontcolor="black", label="FedOpt", shape="record", style="solid"];
//"flwr.server.strategy.fedyogi.FedYogi" [color="black", fontcolor="black", label="{FedYogi|current_weights\lm_t\lv_t\l|aggregate_fit(rnd: int, results: List[Tuple[ClientProxy, FitRes]], failures: List[BaseException]): Tuple[Optional[Parameters], Dict[str, Scalar]]\l}", shape="record", style="solid"];
"flwr.server.strategy.qfedavg.QFedAvg" [color="black", fontcolor="black", label="{QFedAvg}", shape="record", style="solid"];
"flwr.server.server.Server" [color="black", fontcolor="black", label="{Server|max_workers : int\lparameters : Parameters\lstrategy : Strategy\l|disconnect_all_clients()\levaluate_round()\lfit()\lfit_round()\lset_max_workers()\lset_strategy() \l}", shape="record", style="solid"];
"flwr.server.strategy.strategy.Strategy" [color="black", fontcolor="black", label="{Strategy|aggregate_evaluate()\laggregate_fit()\lconfigure_evaluate()\lconfigure_fit()\levaluate()\linitialize_parameters()\l}", shape="record", style="solid"];

"flwr.server.strategy.fast_and_slow.FastAndSlow" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
//"flwr.server.strategy.fault_tolerant_fedavg.FaultTolerantFedAvg" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedadagrad.FedAdagrad" -> "flwr.server.strategy.fedopt.FedOpt" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedadam.FedAdam" -> "flwr.server.strategy.fedopt.FedOpt" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedavg.FedAvg" -> "flwr.server.strategy.strategy.Strategy" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedavg_android.FedAvgAndroid" -> "flwr.server.strategy.strategy.Strategy" [arrowhead="empty", arrowtail="none"];
//"flwr.server.strategy.fedavgm.FedAvgM" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
//"flwr.server.strategy.fedfs_v0.FedFSv0" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
//"flwr.server.strategy.fedfs_v1.FedFSv1" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.fedopt.FedOpt" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
//"flwr.server.strategy.fedyogi.FedYogi" -> "flwr.server.strategy.fedopt.FedOpt" [arrowhead="empty", arrowtail="none"];
"flwr.server.strategy.qfedavg.QFedAvg" -> "flwr.server.strategy.fedavg.FedAvg" [arrowhead="empty", arrowtail="none"];
//"flwr.server.client_proxy.ClientProxy" -> "flwr.server.client_manager.ClientManager" [arrowhead="diamond", arrowtail="none", style="solid"];
//"flwr.server.client_manager.ClientManager" -> "flwr.server.server.Server" [arrowhead="diamond", arrowtail="none", style="solid"];
"flwr.server.strategy.strategy.Strategy" -> "flwr.server.server.Server" [arrowhead="diamond", arrowtail="none", style="solid"];
}
